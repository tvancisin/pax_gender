{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "LayerCake.svelte",
    "Html.svelte",
    "ScaledSvg.svelte",
    "Svg.svelte",
    "App.svelte",
    "Divider.svelte",
    "Filler.svelte",
    "Header.svelte",
    "ONSFooter.svelte",
    "ONSHeader.svelte",
    "Scroller.svelte",
    "Afghanistan.svelte",
    "BackgroundRectangle.svelte",
    "Canvas.svelte",
    "Geography.svelte",
    "IndividualRectangle.svelte",
    "Lines.svelte",
    "Map.svelte",
    "Rectangles.svelte",
    "Stages.svelte",
    "Timeline.svelte"
  ],
  "sourcesContent": [
    "<!--\n\t@component\n\tLayer Cake component\n -->\n<script>\n\timport { setContext, onMount } from 'svelte';\n\timport { writable, derived } from 'svelte/store';\n\n\timport makeAccessor from './utils/makeAccessor.js';\n\timport filterObject from './utils/filterObject.js';\n\timport debounce from './utils/debounce.js';\n\n\timport calcScaleExtents from './helpers/calcScaleExtents.js';\n\timport calcDomain from './helpers/calcDomain.js';\n\timport createScale from './helpers/createScale.js';\n\timport createGetter from './helpers/createGetter.js';\n\timport getRange from './helpers/getRange.js';\n\timport printDebug from './helpers/printDebug.js';\n\n\timport defaultScales from './settings/defaultScales.js';\n\n\tconst printDebug_debounced = debounce(printDebug, 200);\n\n\t/** @type {Boolean} [ssr=false] Whether this chart should be rendered server side. */\n\texport let ssr = false;\n\t/** @type {Boolean} [pointerEvents=true] Whether to allow pointer events via CSS. Set this to `false` to set `pointer-events: none;` on all components, disabling all mouse interaction. */\n\texport let pointerEvents = true;\n\t/** @type {String} [position='relative'] Determine the positioning of the wrapper div. Set this to `'absolute'` when you want to stack cakes. */\n\texport let position = 'relative';\n\t/** @type {Boolean} [percentRange=false] If `true`, set all scale ranges to `[0, 100]`. Ranges reversed via `xReverse`, `yReverse`, `zReverse` or `rReverse` props will continue to be reversed as usual. */\n\texport let percentRange = false;\n\n\t/** @type {Number} [width=containerWidth] Override the automated width. */\n\texport let width = undefined;\n\t/** @type {Number} [height=containerHeight] Override the automated height. */\n\texport let height = undefined;\n\n\t/** @type {Number} [containerWidth=100] The bound container width. */\n\texport let containerWidth = width || 100;\n\t/** @type {Number} [containerHeight=100] The bound container height. */\n\texport let containerHeight = height || 100;\n\n\t/**\t@type {Element} [element] The .layercake-container `<div>` tag. Useful for bindings. */\n\texport let element = undefined;\n\n\t/* --------------------------------------------\n\t * Parameters\n\t * Values that computed properties are based on and that\n\t * can be easily extended from config values\n\t *\n\t */\n\n\t/** @type {String|Function|Number|Array} x The x accessor. The key in each row of data that corresponds to the x-field. This can be a string, an accessor function, a number or an array of any combination of those types. This property gets converted to a function when you access it through the context. */\n\texport let x = undefined;\n\t/** @type {String|Function|Number|Array} y The y accessor. The key in each row of data that corresponds to the y-field. This can be a string, an accessor function, a number or an array of any combination of those types. This property gets converted to a function when you access it through the context. */\n\texport let y = undefined;\n\t/** @type {String|Function|Number|Array} z The z accessor. The key in each row of data that corresponds to the z-field. This can be a string, an accessor function, a number or an array of any combination of those types. This property gets converted to a function when you access it through the context. */\n\texport let z = undefined;\n\t/** @type {String|Function|Number|Array} r The r accessor. The key in each row of data that corresponds to the r-field. This can be a string, an accessor function, a number or an array of any combination of those types. This property gets converted to a function when you access it through the context. */\n\texport let r = undefined;\n\n\t/** @type {Array|Object} [data=[]] If `data` is not a flat array of objects and you want to use any of the scales, set a flat version of the data via the `flatData` prop. */\n\texport let data = [];\n\n\t/** @type {[min: Number|null, max: Number|null]|String[]|Number[]|Function} [xDomain] Set a min or max. For linear scales, if you want to inherit the value from the data's extent, set that value to `null`. This value can also be an array because sometimes your scales are [piecewise](https://github.com/d3/d3-scale#continuous_domain) or are a list of discrete values such as in [ordinal scales](https://github.com/d3/d3-scale#ordinal-scales), useful for color series. Set it to a function that receives the computed domain and lets you return a modified domain, useful for sorting values. */\n\texport let xDomain = undefined;\n\t/** @type {[min: Number|null, max: Number|null]|String[]|Number[]|Function} [yDomain] Set a min or max. For linear scales, if you want to inherit the value from the data's extent, set that value to `null`.  Set it to a function that receives the computed domain and lets you return a modified domain, useful for sorting values. */\n\texport let yDomain = undefined;\n\t/** @type {[min: Number|null, max: Number|null]|String[]|Number[]|Function} [zDomain] Set a min or max. For linear scales, if you want to inherit the value from the data's extent, set that value to `null`. This value can also be an array because sometimes your scales are [piecewise](https://github.com/d3/d3-scale#continuous_domain) or are a list of discrete values such as in [ordinal scales](https://github.com/d3/d3-scale#ordinal-scales), useful for color series. Set it to a function that receives the computed domain and lets you return a modified domain, useful for sorting values. */\n\texport let zDomain = undefined;\n\t/** @type {[min: Number|null, max: Number|null]|String[]|Number[]|Function} [rDomain] Set a min or max. For linear scales, if you want to inherit the value from the data's extent, set that value to `null`. This value can also be an array because sometimes your scales are [piecewise](https://github.com/d3/d3-scale#continuous_domain) or are a list of discrete values such as in [ordinal scales](https://github.com/d3/d3-scale#ordinal-scales), useful for color series. Set it to a function that receives the computed domain and lets you return a modified domain, useful for sorting values. */\n\texport let rDomain = undefined;\n\t/** @type {Boolean|Number} [xNice=false] Applies D3's [scale.nice()](https://github.com/d3/d3-scale#continuous_nice) to the x domain. */\n\texport let xNice = false;\n\t/** @type {Boolean|Number} [yNice=false] Applies D3's [scale.nice()](https://github.com/d3/d3-scale#continuous_nice) to the y domain. */\n\texport let yNice = false;\n\t/** @type {Boolean|Number} [zNice=false] Applies D3's [scale.nice()](https://github.com/d3/d3-scale#continuous_nice) to the z domain. */\n\texport let zNice = false;\n\t/** @type {Boolean} [rNice=false] Applies D3's [scale.nice()](https://github.com/d3/d3-scale#continuous_nice) to the r domain. */\n\texport let rNice = false;\n\t/** @type {[leftPixels: Number, rightPixels: Number]} [xPadding] Assign a pixel value to add to the min or max of the scale. This will increase the scales domain by the scale unit equivalent of the provided pixels. */\n\texport let xPadding = undefined;\n\t/** @type {[leftPixels: Number, rightPixels: Number]} [yPadding] Assign a pixel value to add to the min or max of the scale. This will increase the scales domain by the scale unit equivalent of the provided pixels. */\n\texport let yPadding = undefined;\n\t/** @type {[leftPixels: Number, rightPixels: Number]} [zPadding] Assign a pixel value to add to the min or max of the scale. This will increase the scales domain by the scale unit equivalent of the provided pixels. */\n\texport let zPadding = undefined;\n\t/** @type {[leftPixels: Number, rightPixels: Number]} [rPadding] Assign a pixel value to add to the min or max of the scale. This will increase the scales domain by the scale unit equivalent of the provided pixels. */\n\texport let rPadding = undefined;\n\t/** @type {Function} [xScale=d3.scaleLinear] The D3 scale that should be used for the x-dimension. Pass in an instantiated D3 scale if you want to override the default or you want to extra options. */\n\texport let xScale = defaultScales.x;\n\t/** @type {Function} [yScale=d3.scaleLinear] The D3 scale that should be used for the x-dimension. Pass in an instantiated D3 scale if you want to override the default or you want to extra options. */\n\texport let yScale = defaultScales.y;\n\t/** @type {Function} [zScale=d3.scaleLinear] The D3 scale that should be used for the x-dimension. Pass in an instantiated D3 scale if you want to override the default or you want to extra options. */\n\texport let zScale = defaultScales.z;\n\t/** @type {Function} [rScale=d3.scaleSqrt] The D3 scale that should be used for the x-dimension. Pass in an instantiated D3 scale if you want to override the default or you want to extra options. */\n\texport let rScale = defaultScales.r;\n\t/** @type {[min: Number, max: Number]|Function|String[]|Number[]} [xRange] Override the default x range of `[0, width]` by setting an array or function with argument `({ width, height})` that returns an array. Setting this prop overrides `xReverse`. This can also be a list of numbers or strings for scales with discrete ranges like [scaleThreshhold](https://github.com/d3/d3-scale#threshold-scales) or [scaleQuantize](https://github.com/d3/d3-scale#quantize-scales). */\n\texport let xRange = undefined;\n\t/** @type {[min: Number, max: Number]|Function|String[]|Number[]} [xRange] Override the default y range of `[0, height]` by setting an array or function with argument `({ width, height})` that returns an array. Setting this prop overrides `yReverse`. This can also be a list of numbers or strings for scales with discrete ranges like [scaleThreshhold](https://github.com/d3/d3-scale#threshold-scales) or [scaleQuantize](https://github.com/d3/d3-scale#quantize-scales). */\n\texport let yRange = undefined;\n\t/** @type {[min: Number, max: Number]|Function|String[]|Number[]} [zRange] Override the default z range of `[0, width]` by setting an array or function with argument `({ width, height})` that returns an array. Setting this prop overrides `zReverse`. This can also be a list of numbers or strings for scales with discrete ranges like [scaleThreshhold](https://github.com/d3/d3-scale#threshold-scales) or [scaleQuantize](https://github.com/d3/d3-scale#quantize-scales). */\n\texport let zRange = undefined;\n\t/** @type {[min: Number, max: Number]|Function|String[]|Number[]} [rRange] Override the default r range of `[1, 25]` by setting an array or function with argument `({ width, height})` that returns an array. Setting this prop overrides `rReverse`. This can also be a list of numbers or strings for scales with discrete ranges like [scaleThreshhold](https://github.com/d3/d3-scale#threshold-scales) or [scaleQuantize](https://github.com/d3/d3-scale#quantize-scales). */\n\texport let rRange = undefined;\n\t/** @type {Boolean} [xReverse=false] Reverse the default x range. By default this is `false` and the range is `[0, width]`. Ignored if you set the xRange prop. */\n\texport let xReverse = false;\n\t/** @type {Boolean} [yReverse=true] Reverse the default y range. By default this is `true` and the range is `[height, 0]` unless using an ordinal scale with a `.bandwidth` method for `yScale`. Ignored if you set the `yRange` prop. */\n\texport let yReverse = undefined\n\t/** @type {Boolean} [zReverse=false] Reverse the default z range. By default this is `false` and the range is `[0, width]`. Ignored if you set the zRange prop. */\n\texport let zReverse = false;\n\t/** @type {Boolean} [rReverse=false] Reverse the default r range. By default this is `false` and the range is `[1, 25]`. Ignored if you set the rRange prop. */\n\texport let rReverse = false;\n\t/** @type {{top?: Number, right?: Number, bottom?: Number, left?: Number}} [padding={}] The amount of padding to put around your chart. It operates like CSS box-sizing: border-box; where values are subtracted from the parent container's width and height, the same as a [D3 margin convention](https://bl.ocks.org/mbostock/3019563). */\n\texport let padding = {};\n\t/** @type {{ x?: [min: Number, max: Number], y?: [min: Number, max: Number], r?: [min: Number, max: Number], z?: [min: Number, max: Number] }} [extents] Manually set the extents of the x, y or r scale as a two-dimensional array of the min and max you want. Setting values here will skip any dynamic extent calculation of the data for that dimension. */\n\texport let extents = {};\n\n\t/** @type {Array} [flatData=data] A flat version of data. */\n\texport let flatData = undefined;\n\n\t/** @type {Object} custom Any extra configuration values you want available on the LayerCake context. This could be useful for color lookups or additional constants. */\n\texport let custom = {};\n\n\t/** @type {Boolean} debug Enable debug printing to the console. Useful to inspect your scales and dimensions. */\n\texport let debug = false;\n\n\t/**\n\t * Make this reactive\n\t */\n\t$: yReverseValue = typeof yReverse === 'undefined'\n\t\t? typeof yScale.bandwidth === 'function' ? false : true\n\t\t: yReverse;\n\n\t/* --------------------------------------------\n\t * Keep track of whether the component has mounted\n\t * This is used to emit warnings once we have measured\n\t * the container object and it doesn't have proper dimensions\n\t */\n\tlet isMounted = false;\n\tonMount(() => {\n\t\tisMounted = true;\n\t});\n\n\t/* --------------------------------------------\n\t * Preserve a copy of our passed in settings before we modify them\n\t * Return this to the user's context so they can reference things if need be\n\t * Add the active keys since those aren't on our settings object.\n\t * This is mostly an escape-hatch\n\t */\n\tconst config = {};\n\t$: if (x) config.x = x;\n\t$: if (y) config.y = y;\n\t$: if (z) config.z = z;\n\t$: if (r) config.r = r;\n\t$: if (xDomain) config.xDomain = xDomain;\n\t$: if (yDomain) config.yDomain = yDomain;\n\t$: if (zDomain) config.zDomain = zDomain;\n\t$: if (rDomain) config.rDomain = rDomain;\n\t$: if (xRange) config.xRange = xRange;\n\t$: if (yRange) config.yRange = yRange;\n\t$: if (zRange) config.zRange = zRange;\n\t$: if (rRange) config.rRange = rRange;\n\n\t/* --------------------------------------------\n\t * Make store versions of each parameter\n\t * Prefix these with `_` to keep things organized\n\t */\n\tconst _percentRange = writable(percentRange);\n\tconst _containerWidth = writable(containerWidth);\n\tconst _containerHeight = writable(containerHeight);\n\tconst _extents = writable(filterObject(extents));\n\tconst _data = writable(data);\n\tconst _flatData = writable(flatData || data);\n\tconst _padding = writable(padding);\n\tconst _x = writable(makeAccessor(x));\n\tconst _y = writable(makeAccessor(y));\n\tconst _z = writable(makeAccessor(z));\n\tconst _r = writable(makeAccessor(r));\n\tconst _xDomain = writable(xDomain);\n\tconst _yDomain = writable(yDomain);\n\tconst _zDomain = writable(zDomain);\n\tconst _rDomain = writable(rDomain);\n\tconst _xNice = writable(xNice);\n\tconst _yNice = writable(yNice);\n\tconst _zNice = writable(zNice);\n\tconst _rNice = writable(rNice);\n\tconst _xReverse = writable(xReverse);\n\tconst _yReverse = writable(yReverseValue);\n\tconst _zReverse = writable(zReverse);\n\tconst _rReverse = writable(rReverse);\n\tconst _xPadding = writable(xPadding);\n\tconst _yPadding = writable(yPadding);\n\tconst _zPadding = writable(zPadding);\n\tconst _rPadding = writable(rPadding);\n\tconst _xRange = writable(xRange);\n\tconst _yRange = writable(yRange);\n\tconst _zRange = writable(zRange);\n\tconst _rRange = writable(rRange);\n\tconst _xScale = writable(xScale);\n\tconst _yScale = writable(yScale);\n\tconst _zScale = writable(zScale);\n\tconst _rScale = writable(rScale);\n\tconst _config = writable(config);\n\tconst _custom = writable(custom);\n\n\t$: $_percentRange = percentRange;\n\t$: $_containerWidth = containerWidth;\n\t$: $_containerHeight = containerHeight;\n\t$: $_extents = filterObject(extents);\n\t$: $_data = data;\n\t$: $_flatData = flatData || data;\n\t$: $_padding = padding;\n\t$: $_x = makeAccessor(x);\n\t$: $_y = makeAccessor(y);\n\t$: $_z = makeAccessor(z);\n\t$: $_r = makeAccessor(r);\n\t$: $_xDomain = xDomain;\n\t$: $_yDomain = yDomain;\n\t$: $_zDomain = zDomain;\n\t$: $_rDomain = rDomain;\n\t$: $_xNice = xNice;\n\t$: $_yNice = yNice;\n\t$: $_zNice = zNice;\n\t$: $_rNice = rNice;\n\t$: $_xReverse = xReverse;\n\t$: $_yReverse = yReverseValue;\n\t$: $_zReverse = zReverse;\n\t$: $_rReverse = rReverse;\n\t$: $_xPadding = xPadding;\n\t$: $_yPadding = yPadding;\n\t$: $_zPadding = zPadding;\n\t$: $_rPadding = rPadding;\n\t$: $_xRange = xRange;\n\t$: $_yRange = yRange;\n\t$: $_zRange = zRange;\n\t$: $_rRange = rRange;\n\t$: $_xScale = xScale;\n\t$: $_yScale = yScale;\n\t$: $_zScale = zScale;\n\t$: $_rScale = rScale;\n\t$: $_custom = custom;\n\t$: $_config = config;\n\n\t/* --------------------------------------------\n\t * Create derived values\n\t * Suffix these with `_d`\n\t */\n\tconst activeGetters_d = derived([_x, _y, _z, _r], ([$x, $y, $z, $r]) => {\n\t\tconst obj = {};\n\t\tif ($x) {\n\t\t\tobj.x = $x;\n\t\t}\n\t\tif ($y) {\n\t\t\tobj.y = $y;\n\t\t}\n\t\tif ($z) {\n\t\t\tobj.z = $z;\n\t\t}\n\t\tif ($r) {\n\t\t\tobj.r = $r;\n\t\t}\n\t\treturn obj;\n\t});\n\n\tconst padding_d = derived([_padding, _containerWidth, _containerHeight], ([$padding]) => {\n\t\tconst defaultPadding = { top: 0, right: 0, bottom: 0, left: 0 };\n\t\treturn Object.assign(defaultPadding, $padding);\n\t});\n\n\tconst box_d = derived(\n\t\t[_containerWidth, _containerHeight, padding_d],\n\t\t([$containerWidth, $containerHeight, $padding]) => {\n\t\t\tconst b = {};\n\t\t\tb.top = $padding.top;\n\t\t\tb.right = $containerWidth - $padding.right;\n\t\t\tb.bottom = $containerHeight - $padding.bottom;\n\t\t\tb.left = $padding.left;\n\t\t\tb.width = b.right - b.left;\n\t\t\tb.height = b.bottom - b.top;\n\t\t\tif (b.width <= 0 && isMounted === true) {\n\t\t\t\tconsole.warn(\n\t\t\t\t\t'[LayerCake] Target div has zero or negative width. Did you forget to set an explicit width in CSS on the container?'\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (b.height <= 0 && isMounted === true) {\n\t\t\t\tconsole.warn(\n\t\t\t\t\t'[LayerCake] Target div has zero or negative height. Did you forget to set an explicit height in CSS on the container?'\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn b;\n\t\t}\n\t);\n\n\tconst width_d = derived([box_d], ([$box]) => {\n\t\treturn $box.width;\n\t});\n\n\tconst height_d = derived([box_d], ([$box]) => {\n\t\treturn $box.height;\n\t});\n\n\t/* --------------------------------------------\n\t * Calculate extents by taking the extent of the data\n\t * and filling that in with anything set by the user\n\t * Note that this is different from an \"extent\" passed\n\t * in as a domain, which can be a partial domain\n\t */\n\tconst extents_d = derived(\n\t\t[_flatData, activeGetters_d, _extents, _xScale, _yScale, _rScale, _zScale],\n\t\t([$flatData, $activeGetters, $extents, $_xScale, $_yScale, $_rScale, $_zScale]) => {\n\t\t\tconst scaleLookup = { x: $_xScale, y: $_yScale, r: $_rScale, z: $_zScale };\n\t\t\tconst getters = filterObject($activeGetters, $extents);\n\t\t\tconst activeScales = Object.fromEntries(Object.keys(getters).map((k) => [k, scaleLookup[k]]));\n\n\t\t\tif (Object.keys(getters).length > 0) {\n\t\t\t\tconst calculatedExtents = calcScaleExtents($flatData, getters, activeScales);\n\t\t\t\treturn { ...calculatedExtents, ...$extents };\n\t\t\t} else {\n\t\t\t\treturn {};\n\t\t\t}\n\t\t}\n\t);\n\n\tconst xDomain_d = derived([extents_d, _xDomain], calcDomain('x'));\n\tconst yDomain_d = derived([extents_d, _yDomain], calcDomain('y'));\n\tconst zDomain_d = derived([extents_d, _zDomain], calcDomain('z'));\n\tconst rDomain_d = derived([extents_d, _rDomain], calcDomain('r'));\n\n\tconst xScale_d = derived(\n\t\t[\n\t\t\t_xScale,\n\t\t\textents_d,\n\t\t\txDomain_d,\n\t\t\t_xPadding,\n\t\t\t_xNice,\n\t\t\t_xReverse,\n\t\t\twidth_d,\n\t\t\theight_d,\n\t\t\t_xRange,\n\t\t\t_percentRange\n\t\t],\n\t\tcreateScale('x')\n\t);\n\tconst xGet_d = derived([_x, xScale_d], createGetter);\n\n\tconst yScale_d = derived(\n\t\t[\n\t\t\t_yScale,\n\t\t\textents_d,\n\t\t\tyDomain_d,\n\t\t\t_yPadding,\n\t\t\t_yNice,\n\t\t\t_yReverse,\n\t\t\twidth_d,\n\t\t\theight_d,\n\t\t\t_yRange,\n\t\t\t_percentRange\n\t\t],\n\t\tcreateScale('y')\n\t);\n\tconst yGet_d = derived([_y, yScale_d], createGetter);\n\n\tconst zScale_d = derived(\n\t\t[\n\t\t\t_zScale,\n\t\t\textents_d,\n\t\t\tzDomain_d,\n\t\t\t_zPadding,\n\t\t\t_zNice,\n\t\t\t_zReverse,\n\t\t\twidth_d,\n\t\t\theight_d,\n\t\t\t_zRange,\n\t\t\t_percentRange\n\t\t],\n\t\tcreateScale('z')\n\t);\n\tconst zGet_d = derived([_z, zScale_d], createGetter);\n\n\tconst rScale_d = derived(\n\t\t[\n\t\t\t_rScale,\n\t\t\textents_d,\n\t\t\trDomain_d,\n\t\t\t_rPadding,\n\t\t\t_rNice,\n\t\t\t_rReverse,\n\t\t\twidth_d,\n\t\t\theight_d,\n\t\t\t_rRange,\n\t\t\t_percentRange\n\t\t],\n\t\tcreateScale('r')\n\t);\n\tconst rGet_d = derived([_r, rScale_d], createGetter);\n\n\tconst xRange_d = derived([xScale_d], getRange);\n\tconst yRange_d = derived([yScale_d], getRange);\n\tconst zRange_d = derived([zScale_d], getRange);\n\tconst rRange_d = derived([rScale_d], getRange);\n\n\tconst aspectRatio_d = derived([width_d, height_d], ([$width, $height]) => {\n\t\treturn $width / $height;\n\t});\n\n\t$: context = {\n\t\tactiveGetters: activeGetters_d,\n\t\twidth: width_d,\n\t\theight: height_d,\n\t\tpercentRange: _percentRange,\n\t\taspectRatio: aspectRatio_d,\n\t\tcontainerWidth: _containerWidth,\n\t\tcontainerHeight: _containerHeight,\n\t\tx: _x,\n\t\ty: _y,\n\t\tz: _z,\n\t\tr: _r,\n\t\tcustom: _custom,\n\t\tdata: _data,\n\t\txNice: _xNice,\n\t\tyNice: _yNice,\n\t\tzNice: _zNice,\n\t\trNice: _rNice,\n\t\txReverse: _xReverse,\n\t\tyReverse: _yReverse,\n\t\tzReverse: _zReverse,\n\t\trReverse: _rReverse,\n\t\txPadding: _xPadding,\n\t\tyPadding: _yPadding,\n\t\tzPadding: _zPadding,\n\t\trPadding: _rPadding,\n\t\tpadding: padding_d,\n\t\tflatData: _flatData,\n\t\textents: extents_d,\n\t\txDomain: xDomain_d,\n\t\tyDomain: yDomain_d,\n\t\tzDomain: zDomain_d,\n\t\trDomain: rDomain_d,\n\t\txRange: xRange_d,\n\t\tyRange: yRange_d,\n\t\tzRange: zRange_d,\n\t\trRange: rRange_d,\n\t\tconfig: _config,\n\t\txScale: xScale_d,\n\t\txGet: xGet_d,\n\t\tyScale: yScale_d,\n\t\tyGet: yGet_d,\n\t\tzScale: zScale_d,\n\t\tzGet: zGet_d,\n\t\trScale: rScale_d,\n\t\trGet: rGet_d\n\t};\n\n\t$: setContext('LayerCake', context);\n\n\t$: if ($box_d && debug === true && (ssr === true || typeof window !== 'undefined')) {\n\t\t// Call this as a debounce so that it doesn't get called multiple times as these vars get filled in\n\t\tprintDebug_debounced({\n\t\t\tboundingBox: $box_d,\n\t\t\tactiveGetters: $activeGetters_d,\n\t\t\tx: config.x,\n\t\t\ty: config.y,\n\t\t\tz: config.z,\n\t\t\tr: config.r,\n\t\t\txScale: $xScale_d,\n\t\t\tyScale: $yScale_d,\n\t\t\tzScale: $zScale_d,\n\t\t\trScale: $rScale_d,\n\t\t});\n\t}\n</script>\n\n{#if ssr === true || typeof window !== 'undefined'}\n\t<div\n\t\tbind:this={element}\n\t\tclass=\"layercake-container\"\n\t\tstyle:position\n\t\tstyle:top={position === 'absolute' ? '0' : null}\n\t\tstyle:right={position === 'absolute' ? '0' : null}\n\t\tstyle:bottom={position === 'absolute' ? '0' : null}\n\t\tstyle:left={position === 'absolute' ? '0' : null}\n\t\tstyle:pointer-events={pointerEvents === false ? 'none' : null}\n\t\tbind:clientWidth={containerWidth}\n\t\tbind:clientHeight={containerHeight}\n\t>\n\t\t<slot\n\t\t\t{element}\n\t\t\twidth={$width_d}\n\t\t\theight={$height_d}\n\t\t\taspectRatio={$aspectRatio_d}\n\t\t\tcontainerWidth={$_containerWidth}\n\t\t\tcontainerHeight={$_containerHeight}\n\t\t\tactiveGetters={$activeGetters_d}\n\t\t\tpercentRange={$_percentRange}\n\t\t\tx={$_x}\n\t\t\ty={$_y}\n\t\t\tz={$_z}\n\t\t\tr={$_r}\n\t\t\tcustom={$_custom}\n\t\t\tdata={$_data}\n\t\t\txNice={$_xNice}\n\t\t\tyNice={$_yNice}\n\t\t\tzNice={$_zNice}\n\t\t\trNice={$_rNice}\n\t\t\txReverse={$_xReverse}\n\t\t\tyReverse={$_yReverse}\n\t\t\tzReverse={$_zReverse}\n\t\t\trReverse={$_rReverse}\n\t\t\txPadding={$_xPadding}\n\t\t\tyPadding={$_yPadding}\n\t\t\tzPadding={$_zPadding}\n\t\t\trPadding={$_rPadding}\n\t\t\tpadding={$padding_d}\n\t\t\tflatData={$_flatData}\n\t\t\textents={$extents_d}\n\t\t\txDomain={$xDomain_d}\n\t\t\tyDomain={$yDomain_d}\n\t\t\tzDomain={$zDomain_d}\n\t\t\trDomain={$rDomain_d}\n\t\t\txRange={$xRange_d}\n\t\t\tyRange={$yRange_d}\n\t\t\tzRange={$zRange_d}\n\t\t\trRange={$rRange_d}\n\t\t\tconfig={$_config}\n\t\t\txScale={$xScale_d}\n\t\t\txGet={$xGet_d}\n\t\t\tyScale={$yScale_d}\n\t\t\tyGet={$yGet_d}\n\t\t\tzScale={$zScale_d}\n\t\t\tzGet={$zGet_d}\n\t\t\trScale={$rScale_d}\n\t\t\trGet={$rGet_d}\n\t\t/>\n\t</div>\n{/if}\n\n<style>\n\t.layercake-container,\n\t.layercake-container :global(*) {\n\t\tbox-sizing: border-box;\n\t}\n\t.layercake-container {\n\t\twidth: 100%;\n\t\theight: 100%;\n\t}\n</style>\n",
    "<!--\n\t@component\n\tHTML layout component\n -->\n<script>\n\timport { getContext } from 'svelte';\n\n\tconst { padding } = getContext('LayerCake');\n\n\t/** @type {Element} [element] The layer's outermost `<div>` tag. Useful for bindings. */\n\texport let element = undefined;\n\n\t/** @type {Number} [zIndex] The layer's z-index. */\n\texport let zIndex = undefined;\n\n\t/** @type {Boolean} [pointerEvents] Set this to `false` to set `pointer-events: none;` on the entire layer. */\n\texport let pointerEvents = undefined;\n\n\t/** @type {String} [role] A string passed to the `aria-role` on the `<div>` tag. This is `undefined` by default but will be set by default to `'figure'` if `label`, `labelledby` or `describedby` is set. That default will be overridden by whatever is passed in. */\n\texport let role = undefined;\n\n\t/** @type {String} [label] A string passed to the `aria-label` on the `<div>` tag. */\n\texport let label = undefined;\n\n\t/** @type {String} [labelledBy] A string passed to the `aria-labelledby` on the `<div>` tag. */\n\texport let labelledBy = undefined;\n\n\t/** @type {String} [describedBy] A string passed to `aria-describedby` property on the `<div>` tag. */\n\texport let describedBy = undefined;\n\n\t$: roleVal = role || (label || labelledBy || describedBy ? 'figure' : undefined);\n</script>\n\n<div\n\tbind:this={element}\n\tclass=\"layercake-layout-html\"\n\tstyle:z-index={zIndex}\n\tstyle:pointer-events={pointerEvents === false ? 'none' : null}\n\tstyle:top={$padding.top + 'px'}\n\tstyle:right={$padding.right + 'px'}\n\tstyle:bottom={$padding.bottom + 'px'}\n\tstyle:left={$padding.left + 'px'}\n\trole={roleVal}\n\taria-label={label}\n\taria-labelledby={labelledBy}\n\taria-describedby={describedBy}\n>\n\t<slot {element}></slot>\n</div>\n\n<style>\n\tdiv,\n\tslot {\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\tleft: 0;\n\t}\n</style>\n",
    "<!--\n\t@component\n\tScaled SVG layout component\n -->\n<script>\n\timport { getContext } from 'svelte';\n\n\tconst { padding } = getContext('LayerCake');\n\n\t/** @type {Element} [element] The layer's `<svg>` tag. Useful for bindings. */\n\texport let element = undefined;\n\n\t/** @type {Number} [zIndex] The layer's z-index. */\n\texport let zIndex = undefined;\n\n\t/** @type {Boolean} [pointerEvents] Set this to `false` to set `pointer-events: none;` on the entire layer. */\n\texport let pointerEvents = undefined;\n\n\t/** @type {Number} [fixedAspectRatio=1`] A number to set the aspect ratio onto the viewBox. */\n\texport let fixedAspectRatio = 1;\n\n\t/** @type {String} [viewBox=`0 0 100 ${100 / fixedAspectRatio}`] A string passed to the `viewBox` property on the `<svg>` tag. */\n\texport let viewBox = `0 0 100 ${100 / fixedAspectRatio}`;\n\t$: viewBox = `0 0 100 ${100 / fixedAspectRatio}`;\n\n\t/** @type {String} [label] A string passed to the `aria-label` on the `<svg>` tag. */\n\texport let label = undefined;\n\n\t/** @type {String} [labelledBy] A string passed to the `aria-labelledby` on the `<svg>` tag. */\n\texport let labelledBy = undefined;\n\n\t/** @type {String} [describedBy] A string passed to `aria-describedby` property on the `<svg>` tag. */\n\texport let describedBy = undefined;\n\n\t/** @type {String} [title] Shorthand to set the contents of `<title></title>` for accessibility. You can also set arbitrary HTML via the \"title\" slot but this is a convenient shorthand. If you use the \"title\" slot, this prop is ignored. */\n\texport let title = undefined;\n</script>\n\n<svg\n\tbind:this={element}\n\t{viewBox}\n\tpreserveAspectRatio=\"none\"\n\tstyle:z-index={zIndex}\n\tstyle:pointer-events={pointerEvents === false ? 'none' : null}\n\tstyle:top={$padding.top + 'px'}\n\tstyle:left={$padding.left + 'px'}\n\tstyle:width={`calc(100% - ${($padding.left + $padding.right)}px)`}\n\tstyle:height={`calc(100% - ${($padding.top + $padding.bottom)}px)`}\n\tstyle=\"right:0px; bottom:0px;\"\n\taria-label={label}\n\taria-labelledby={labelledBy}\n\taria-describedby={describedBy}\n>\n\t<slot name=\"title\">{#if title}<title>{title}</title>{/if}</slot>\n\n\t<defs>\n\t\t<slot name=\"defs\"></slot>\n\t</defs>\n\n\t<slot {element}></slot>\n</svg>\n\n<style>\n\tsvg {\n\t\tposition: absolute;\n\t\twidth: 100%;\n\t\theight: 100%;\n\t\toverflow: visible;\n\t}\n\tsvg :global(*) {\n\t\tvector-effect: non-scaling-stroke;\n\t}\n</style>\n",
    "<!--\n\t@component\n\tSVG layout component\n -->\n<script>\n\timport { getContext } from 'svelte';\n\n\t/** @type {Element} [element] The layer's `<svg>` tag. Useful for bindings. */\n\texport let element = undefined;\n\n\t/** @type {Element} [innerElement] The layer's `<g>` tag. Useful for bindings. */\n\texport let innerElement = undefined;\n\n\t/** @type {Number} [zIndex] The layer's z-index. */\n\texport let zIndex = undefined;\n\n\t/** @type {Boolean} [pointerEvents] Set this to `false` to set `pointer-events: none;` on the entire layer. */\n\texport let pointerEvents = undefined;\n\n\t/** @type {String} [viewBox] A string passed to the `viewBox` property on the `<svg>` tag. */\n\texport let viewBox = undefined;\n\n\t/** @type {String} [label] A string passed to the `aria-label` property on the `<svg>` tag. */\n\texport let label = undefined;\n\n\t/** @type {String} [labelledBy] A string passed to the `aria-labelledby property` on the `<svg>` tag. */\n\texport let labelledBy = undefined;\n\n\t/** @type {String} [describedBy] A string passed to the `aria-describedby` property on the `<svg>` tag. */\n\texport let describedBy = undefined;\n\n\t/** @type {String} [title] Shorthand to set the contents of `<title></title>` for accessibility. You can also set arbitrary HTML via the \"title\" slot but this is a convenient shorthand. If you use the \"title\" slot, this prop is ignored. */\n\texport let title = undefined;\n\n\tconst { containerWidth, containerHeight, padding } = getContext('LayerCake');\n</script>\n\n<svg\n\tbind:this={element}\n\tclass=\"layercake-layout-svg\"\n\t{viewBox}\n\twidth={$containerWidth}\n\theight={$containerHeight}\n\tstyle:z-index={zIndex}\n\tstyle:pointer-events={pointerEvents === false ? 'none' : null}\n\taria-label={label}\n\taria-labelledby={labelledBy}\n\taria-describedby={describedBy}\n>\n\t<slot name=\"title\">{#if title}<title>{title}</title>{/if}</slot>\n\n\t<defs>\n\t\t<slot name=\"defs\"></slot>\n\t</defs>\n\t<g\n\t\tbind:this={innerElement}\n\t\tclass=\"layercake-layout-svg_g\"\n\t\ttransform=\"translate({$padding.left}, {$padding.top})\">\n\t\t<slot {element}></slot>\n\t</g>\n</svg>\n\n<style>\n\tsvg {\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\tleft: 0;\n\t\toverflow: visible;\n\t}\n</style>\n",
    "<script>\r\n\t// CORE IMPORTS\r\n\timport * as d3 from \"d3\";\r\n\timport { setContext, onMount } from \"svelte\";\r\n\timport { themes } from \"./config.js\";\r\n\timport ONSHeader from \"./layout/ONSHeader.svelte\";\r\n\timport ONSFooter from \"./layout/ONSFooter.svelte\";\r\n\timport Header from \"./layout/Header.svelte\";\r\n\timport Scroller from \"./layout/Scroller.svelte\";\r\n\timport Filler from \"./layout/Filler.svelte\";\r\n\timport Divider from \"./layout/Divider.svelte\";\r\n\timport Lines from \"./vis/Lines.svelte\";\r\n\timport Stages from \"./vis/Stages.svelte\";\r\n\timport Rectangles from \"./vis/Rectangles.svelte\";\r\n\timport { setColors, getGEO, getCSV } from \"./utils.js\";\r\n\timport { centralPointsStore } from \"./store\";\r\n\timport Timeline from \"./vis/Timeline.svelte\";\r\n\timport Geography from \"./vis/Geography.svelte\";\r\n\timport Afghanistan from \"./vis/Afghanistan.svelte\";\r\n\r\n\tlet mapLoaded = false;\r\n\r\n\t// Set theme globally (options are 'light', 'dark' or 'lightblue')\r\n\tlet theme = \"dark\";\r\n\tsetContext(\"theme\", theme);\r\n\tsetColors(themes, theme);\r\n\r\n\t// CONFIG FOR SCROLLER COMPONENTS\r\n\tconst threshold = 0.65;\r\n\tlet id = {}; // Object to hold visible section IDs of Scroller components\r\n\tlet idPrev = {}; // Object to keep track of previous IDs, to compare for changes\r\n\r\n\t// SCROLL TO TOP ON MOUNT\r\n\tonMount(() => {\r\n\t\t// scroll to top on loading the page\r\n\t\tif (\"scrollRestoration\" in history) {\r\n\t\t\thistory.scrollRestoration = \"manual\";\r\n\t\t}\r\n\t\twindow.scrollTo({ top: 0, behavior: \"auto\" });\r\n\t\tidPrev = { ...id };\r\n\t});\r\n\r\n\t// STEPS\r\n\tlet step = null;\r\n\tconst actions = {\r\n\t\trect: {\r\n\t\t\trect01: () => {\r\n\t\t\t\tstep = \"rect01\";\r\n\t\t\t},\r\n\t\t\trect02: () => {\r\n\t\t\t\tstep = \"rect02\";\r\n\t\t\t},\r\n\t\t},\r\n\t\tchart: {\r\n\t\t\tchart01: () => {\r\n\t\t\t\tstep = \"one\";\r\n\t\t\t},\r\n\t\t\tchart02: () => {\r\n\t\t\t\tstep = \"two\";\r\n\t\t\t},\r\n\t\t\tchart03: () => {\r\n\t\t\t\tstep = \"three\";\r\n\t\t\t},\r\n\t\t\tchart04: () => {\r\n\t\t\t\tstep = \"four\";\r\n\t\t\t},\r\n\t\t\tchart05: () => {\r\n\t\t\t\tstep = \"five\";\r\n\t\t\t},\r\n\t\t},\r\n\t\ttime: {\r\n\t\t\ttime01: () => {\r\n\t\t\t\tstep = \"1\";\r\n\t\t\t},\r\n\t\t\ttime02: () => {\r\n\t\t\t\tstep = \"2\";\r\n\t\t\t},\r\n\t\t\ttime03: () => {\r\n\t\t\t\tstep = \"3\";\r\n\t\t\t},\r\n\t\t\ttime04: () => {\r\n\t\t\t\tstep = \"4\";\r\n\t\t\t},\r\n\t\t\ttime05: () => {\r\n\t\t\t\tstep = \"5\";\r\n\t\t\t},\r\n\t\t\ttime06: () => {\r\n\t\t\t\tstep = \"6\";\r\n\t\t\t},\r\n\t\t\ttime07: () => {\r\n\t\t\t\tstep = \"7\";\r\n\t\t\t},\r\n\t\t\ttime08: () => {\r\n\t\t\t\tstep = \"8\";\r\n\t\t\t},\r\n\t\t\ttime09: () => {\r\n\t\t\t\tstep = \"9\";\r\n\t\t\t},\r\n\t\t},\r\n\t\tstage: {\r\n\t\t\tstage01: () => {\r\n\t\t\t\tstep = \"stage01\";\r\n\t\t\t},\r\n\t\t\tstage02: () => {\r\n\t\t\t\tstep = \"stage02\";\r\n\t\t\t},\r\n\t\t\tstage03: () => {\r\n\t\t\t\tstep = \"stage03\";\r\n\t\t\t},\r\n\t\t\tstage04: () => {\r\n\t\t\t\tstep = \"stage04\";\r\n\t\t\t},\r\n\t\t},\r\n\t\tmap: {\r\n\t\t\tmap01: () => {\r\n\t\t\t\tstep = \"map_one\";\r\n\t\t\t},\r\n\t\t\tmap02: () => {\r\n\t\t\t\tstep = \"map_two\";\r\n\t\t\t},\r\n\t\t\tmap03: () => {\r\n\t\t\t\tstep = \"map_three\";\r\n\t\t\t},\r\n\t\t\tmap04: () => {\r\n\t\t\t\tstep = \"map_four\";\r\n\t\t\t},\r\n\t\t},\r\n\t\tafgh: {\r\n\t\t\tafgh01: () => {\r\n\t\t\t\tstep = \"afgh01\";\r\n\t\t\t},\r\n\t\t\tafgh02: () => {\r\n\t\t\t\tstep = \"afgh02\";\r\n\t\t\t},\r\n\t\t\tafgh03: () => {\r\n\t\t\t\tstep = \"afgh03\";\r\n\t\t\t},\r\n\t\t},\r\n\t};\r\n\r\n\t// Code to run Scroller actions when new caption IDs come into view\r\n\tfunction runActions(codes = []) {\r\n\t\tcodes.forEach((code) => {\r\n\t\t\tif (id[code] != idPrev[code]) {\r\n\t\t\t\tif (actions[code][id[code]]) {\r\n\t\t\t\t\tactions[code][id[code]]();\r\n\t\t\t\t}\r\n\t\t\t\tidPrev[code] = id[code];\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t// Run above code when 'id' object changes\r\n\t$: id && runActions(Object.keys(actions));\r\n\r\n\t//LOAD GEOJSON\r\n\tlet mygeojson;\r\n\tconst myjson_path = \"./data/custom.geo.json\";\r\n\tgetGEO(myjson_path).then((geo) => {\r\n\t\tmygeojson = geo;\r\n\t});\r\n\r\n\t//LOAD PAX\r\n\tlet path = [\r\n\t\t\"./data/pax.csv\",\r\n\t\t\"./data/pax_gender.csv\",\r\n\t\t\"./data/pax_central_points.csv\",\r\n\t\t\"./data/pax_gender_text.csv\",\r\n\t\t\"./data/text_corr.csv\",\r\n\t\t\"./data/wgg_text.csv\",\r\n\t\t\"./data/gender_provisions_afghanistan.csv\",\r\n\t];\r\n\tlet pax;\r\n\tlet pax_gender;\r\n\tlet pax_gender_text;\r\n\tlet corr_text;\r\n\tlet pax_gender_timeline;\r\n\tlet pax_timeline;\r\n\tlet central_points;\r\n\tlet wgg_text;\r\n\tlet pax_stages;\r\n\tlet afghanistan;\r\n\tgetCSV(path).then((data) => {\r\n\t\tpax = data[0];\r\n\t\tpax_gender = data[1];\r\n\t\tcentral_points = data[2];\r\n\t\tcentralPointsStore.set(central_points);\r\n\t\tpax_gender_text = data[3];\r\n\t\tcorr_text = data[4];\r\n\t\twgg_text = data[5];\r\n\t\tafghanistan = data[6];\r\n\r\n\t\t// add text to every pax_gender agt\r\n\t\tpax_gender.forEach((genderItem) => {\r\n\t\t\tconst item = pax_gender_text.find(\r\n\t\t\t\t(gender) => gender.AgtId === genderItem.AgtId,\r\n\t\t\t);\r\n\r\n\t\t\tconst find_corr = corr_text.find(\r\n\t\t\t\t(gender) => gender.AgtId === genderItem.AgtId,\r\n\t\t\t);\r\n\r\n\t\t\tconst detail_wgg = wgg_text.find(\r\n\t\t\t\t(gender) => gender.AgtId === genderItem.AgtId,\r\n\t\t\t);\r\n\r\n\t\t\tconst full_text = +find_corr.Text_length;\r\n\t\t\tconst women_text = item.GeWom.length;\r\n\t\t\tconst quotas_text = detail_wgg.WggGenQuot.length;\r\n\t\t\tconst law_text = detail_wgg.WggIntLaw.length;\r\n\t\t\tconst un_text = detail_wgg.WggUnsc.length;\r\n\r\n\t\t\tif (item) {\r\n\t\t\t\tgenderItem.text = item.GeWom;\r\n\t\t\t\tgenderItem.quotas = quotas_text;\r\n\t\t\t\tgenderItem.law = law_text;\r\n\t\t\t\tgenderItem.un = un_text;\r\n\t\t\t\tgenderItem.corr_char_no = +find_corr.Text_length;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t// Iterate through each object in the pax array\r\n\t\tpax.forEach((paxItem) => {\r\n\t\t\t// Find the corresponding item in pax_gender with the same AgtId\r\n\t\t\tconst genderItem = pax_gender.find(\r\n\t\t\t\t(gender) => gender.AgtId === paxItem.AgtId,\r\n\t\t\t);\r\n\r\n\t\t\t// If a matching item is found, add the WggPar and WggImplSign values\r\n\t\t\tif (genderItem) {\r\n\t\t\t\tpaxItem.WggRehab = genderItem.WggRehab;\r\n\t\t\t\tpaxItem.WggImplRole = genderItem.WggImplRole;\r\n\t\t\t\tpaxItem.WggHR = genderItem.WggHR;\r\n\t\t\t} else {\r\n\t\t\t\t// Optionally handle cases where no matching item is found\r\n\t\t\t\tpaxItem.WggRehab = \"0\";\r\n\t\t\t\tpaxItem.WggImplRole = \"0\";\r\n\t\t\t\tpaxItem.WggHR = \"0\";\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tpax.sort(function (x, y) {\r\n\t\t\treturn d3.ascending(x.Dat.substring(6, 10), y.Dat.substring(6, 10));\r\n\t\t});\r\n\r\n\t\t//group by agreement stages\r\n\t\tpax_stages = d3.groups(pax, (d) => d.Stage);\r\n\t\tlet order = [\"Pre\", \"Cea\", \"SubPar\", \"SubComp\", \"Imp\", \"Ren\", \"Oth\"];\r\n\t\tpax_stages.sort((a, b) => order.indexOf(a[0]) - order.indexOf(b[0]));\r\n\r\n\t\t//group by date for timeline vis\r\n\t\tpax_gender_timeline = d3.groups(pax_gender, (d) =>\r\n\t\t\td.Dat.substring(0, 4),\r\n\t\t);\r\n\t\tpax_timeline = d3.groups(pax, (d) => d.Dat.substring(6, 10));\r\n\t});\r\n\r\n\t//map loaded, show start button\r\n\tfunction handleMapLoaded() {\r\n\t\tmapLoaded = true;\r\n\t\tdocument.getElementById(\"loading_text\").style.visibility = \"hidden\";\r\n\t\tdocument.getElementById(\"loading_button\").style.visibility = \"visible\";\r\n\t}\r\n\r\n\t//clicking on screen or button after map is loaded\r\n\tfunction handleScreenClick(event) {\r\n\t\t// Recalculate width and height\r\n\t\t// width = window.innerWidth;\r\n\t\t// height = window.innerHeight;\r\n\r\n\t\tif (mapLoaded) {\r\n\t\t\tdocument.getElementById(\"loading_screen\").style.visibility =\r\n\t\t\t\t\"hidden\";\r\n\t\t\tdocument.getElementById(\"loading_button\").style.visibility =\r\n\t\t\t\t\"hidden\";\r\n\t\t\tdocument.documentElement.style.overflow = \"visible\"; // For <html>\r\n\t\t\tdocument.body.style.overflow = \"visible\"; // For <body>\r\n\t\t}\r\n\t}\r\n</script>\r\n\r\n<div\r\n\trole=\"presentation\"\r\n\tid=\"loading_screen\"\r\n\tstyle=\"height: calc(var(--vh, 1vh) * 100);\"\r\n\ton:click={handleScreenClick}\r\n>\r\n\t<button id=\"loading_button\" on:click={handleScreenClick}\r\n\t\t>Visualization</button\r\n\t>\r\n\t<p id=\"loading_text\">loading...</p>\r\n</div>\r\n\r\n<ONSHeader filled={false} center={false} />\r\n\r\n<Header bgfixed={false} center={true} short={false}>\r\n\t<img\r\n\t\tclass=\"peace_logo\"\r\n\t\tsrc=\"./img/gen_logo.svg\"\r\n\t\talt=\"peacerep logo\"\r\n\t\tstyle=\"width: 50%;\"\r\n\t/>\r\n\t<!-- <h1>PA-X Gender</h1> -->\r\n\t<p>\r\n\t\tThis scrollytelling visualization uses PA-X database to show how and to\r\n\t\twhat extent <br /> women, girls and gender are taken into consideration in\r\n\t\tpeace agreements around the world.\r\n\t</p>\r\n</Header>\r\n\r\n<Divider />\r\n\r\n<Filler short={true} wide={true} center={true} shadow={true}>\r\n\t<img\r\n\t\tsrc=\"./img/toncontin.png\"\r\n\t\talt=\"peace agreement example\"\r\n\t\tstyle=\"width: 100%;\"\r\n\t/>\r\n\t<p>\r\n\t\tA <strong>peace agreement</strong> is a document produced after discussion\r\n\t\twith conflict protagonists and mutually agreed to by some or all of them,\r\n\t\taddressing conflict with a view to ending it. Below is a ceasefire agreement\r\n\t\tfrom 1990 Nicaragua.\r\n\t</p>\r\n</Filler>\r\n\r\n<Divider />\r\n\r\n<!-- RECTANGLES -->\r\n<Scroller {threshold} bind:id={id[\"rect\"]} splitscreen={false} shadow={false}>\r\n\t<div slot=\"background\">\r\n\t\t<figure>\r\n\t\t\t<div class=\"col-wide height-full\">\r\n\t\t\t\t<div class=\"rect\">\r\n\t\t\t\t\t<Rectangles {pax} {step} />\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</figure>\r\n\t</div>\r\n\r\n\t<div slot=\"foreground\">\r\n\t\t<section data-id=\"rect01\">\r\n\t\t\t<div class=\"col-medium\">\r\n\t\t\t\t<p style=\"text-align: center;\">\r\n\t\t\t\t\tEvery rectangle in this view represents one of 2055\r\n\t\t\t\t\tagreements in the PA-X Peace Agreement Database, the most\r\n\t\t\t\t\texpansive collection of peace agreements data in the world.\r\n\t\t\t\t</p>\r\n\t\t\t</div>\r\n\t\t</section>\r\n\t\t<section data-id=\"rect02\">\r\n\t\t\t<div class=\"col-medium\">\r\n\t\t\t\t<p style=\"text-align: center;\">\r\n\t\t\t\t\tOut of the 2055 agreements, only 436 contain references to\r\n\t\t\t\t\tgender.<br /> That's less than a quarter.\r\n\t\t\t\t</p>\r\n\t\t\t</div>\r\n\t\t</section>\r\n\t</div>\r\n</Scroller>\r\n\r\n<Divider />\r\n\r\n<Filler short={false} wide={true} center={true} shadow={false}>\r\n\t<p>Why should peace agreements incorporate a gender perspective?</p>\r\n</Filler>\r\n\r\n<Filler short={true} wide={true} center={true} shadow={false}>\r\n\t<video\r\n\t\tposter=\"./img/lr_bl.png\"\r\n\t\tcontrols\r\n\t\tstyle=\"width: 80%; height: auto; margin: auto; border-radius: 3px;\"\r\n\t>\r\n\t\t<source src=\"./img/laura.mp4\" type=\"video/mp4\" />\r\n\t\t<track\r\n\t\t\tsrc=\"captions_en\"\r\n\t\t\tkind=\"captions\"\r\n\t\t\tsrclang=\"en\"\r\n\t\t\tlabel=\"english_captions\"\r\n\t\t/>\r\n\r\n\t\tYour browser does not support the video tag.\r\n\t</video>\r\n</Filler>\r\n\r\n<Filler short={false} wide={true} center={true} shadow={false}>\r\n\t<p>\r\n\t\tIn 2000, the United Nations Security Council passed Resolution 1325 on\r\n\t\tWomen, Peace, and Security, calling on all actors involved in\r\n\t\tnegotiating and implementing peace agreements to adopt a gender\r\n\t\tperspective, including:\r\n\t</p>\r\n\t<div id=\"icons\">\r\n\t\t<div class=\"icon-item\">\r\n\t\t\t<img\r\n\t\t\t\tsrc=\"./img/fir.svg\"\r\n\t\t\t\talt=\"peace agreement example\"\r\n\t\t\t\tstyle=\"height: 100px;\"\r\n\t\t\t/>\r\n\t\t\t<p style=\"text-align: left; font-size: 14px\">\r\n\t\t\t\tResponding to the special needs of women and girls during\r\n\t\t\t\trepatriation, resettlement, rehabilitation, reintegration and\r\n\t\t\t\tpost-conflict reconstruction\r\n\t\t\t</p>\r\n\t\t</div>\r\n\t\t<div class=\"icon-item\">\r\n\t\t\t<img\r\n\t\t\t\tsrc=\"./img/sec.svg\"\r\n\t\t\t\talt=\"peace agreement example\"\r\n\t\t\t\tstyle=\"height: 100px;\"\r\n\t\t\t/>\r\n\t\t\t<p style=\"text-align: left; font-size: 14px\">\r\n\t\t\t\tSupporting local women’s and indigenous initiatives for conflict\r\n\t\t\t\tresolution, and involving women in all implementation mechanisms\r\n\t\t\t</p>\r\n\t\t</div>\r\n\t\t<div class=\"icon-item\">\r\n\t\t\t<img\r\n\t\t\t\tsrc=\"./img/thi.svg\"\r\n\t\t\t\talt=\"peace agreement example\"\r\n\t\t\t\tstyle=\"height: 100px;\"\r\n\t\t\t/>\r\n\t\t\t<p style=\"text-align: left; font-size: 14px\">\r\n\t\t\t\tEnsuring the protection of human rights of women and girls,\r\n\t\t\t\tparticularly relating to the constitution, the electoral system,\r\n\t\t\t\tthe police and the judiciary\r\n\t\t\t</p>\r\n\t\t</div>\r\n\t</div>\r\n</Filler>\r\n\r\n<Divider />\r\n\r\n<!-- TIME -->\r\n<Scroller {threshold} bind:id={id[\"time\"]} splitscreen={false} shadow={false}>\r\n\t<div slot=\"background\">\r\n\t\t<figure>\r\n\t\t\t<div class=\"col-wide height-full\">\r\n\t\t\t\t<div class=\"time\">\r\n\t\t\t\t\t<Timeline {pax} {pax_timeline} {step} />\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</figure>\r\n\t</div>\r\n\r\n\t<div slot=\"foreground\">\r\n\t\t<section data-id=\"time01\">\r\n\t\t\t<div class=\"col-medium\">\r\n\t\t\t\t<p style=\"text-align: center;\">\r\n\t\t\t\t\tEach line represents a peace agreements listed on PA-X that\r\n\t\t\t\t\twas reached between 1990 and 2023.\r\n\t\t\t\t</p>\r\n\t\t\t</div>\r\n\t\t</section>\r\n\t\t<section data-id=\"time02\">\r\n\t\t\t<div class=\"col-medium\">\r\n\t\t\t\t<p style=\"text-align: center;\">\r\n\t\t\t\t\tPA-X Gender agreements over time.\r\n\t\t\t\t</p>\r\n\t\t\t</div>\r\n\t\t</section>\r\n\t\t<section data-id=\"time03\">\r\n\t\t\t<div class=\"col-medium\">\r\n\t\t\t\t<p style=\"text-align: center;\">\r\n\t\t\t\t\tIt's crucial to emphasize that gender references can differ\r\n\t\t\t\t\thugely in terms of their substantive quality and\r\n\t\t\t\t\tspecificity, ranging from detailed commitments to rhetorical\r\n\t\t\t\t\treferences to 'women'.\r\n\t\t\t\t</p>\r\n\t\t\t</div>\r\n\t\t</section>\r\n\t\t<section data-id=\"time04\">\r\n\t\t\t<div class=\"col-medium\">\r\n\t\t\t\t<p style=\"text-align: center;\">\r\n\t\t\t\t\tThe highlighted agreements include references to the special\r\n\t\t\t\t\tneeds of women and girls during rehabilitation and\r\n\t\t\t\t\treconstruction.\r\n\t\t\t\t</p>\r\n\t\t\t</div>\r\n\t\t</section>\r\n\t\t<section data-id=\"time05\">\r\n\t\t\t<div class=\"col-medium\">\r\n\t\t\t\t<p style=\"text-align: center;\">\r\n\t\t\t\t\tFor example, the Lome Agreement for Sierra Leone in 1999\r\n\t\t\t\t\tacknowledged women's victimization during the war, and\r\n\t\t\t\t\tstated that 'special attention shall be accorded to their\r\n\t\t\t\t\tneeds and potentials in formulating and implementing\r\n\t\t\t\t\tnational rehabilitation, reconstruction and development\r\n\t\t\t\t\tprogrammes, to enable them to play a central role in the\r\n\t\t\t\t\tmoral, social and physical reconstruction of Sierra Leone.'\r\n\t\t\t\t</p>\r\n\t\t\t</div>\r\n\t\t</section>\r\n\t\t<section data-id=\"time06\">\r\n\t\t\t<div class=\"col-medium\">\r\n\t\t\t\t<p style=\"text-align: center;\">\r\n\t\t\t\t\tTurning to involving women in all implementation mechanisms,\r\n\t\t\t\t\tthese peace agreements included references to women playing\r\n\t\t\t\t\ta role in implementing the agreement.\r\n\t\t\t\t</p>\r\n\t\t\t</div>\r\n\t\t</section>\r\n\t\t<section data-id=\"time07\">\r\n\t\t\t<div class=\"col-medium\">\r\n\t\t\t\t<p style=\"text-align: center;\">\r\n\t\t\t\t\tFor example, the 2016 Final Agreement between the Colombian\r\n\t\t\t\t\tGovernment and the FARC set up a special forum comprising\r\n\t\t\t\t\trepresentatives from 6 national and regional Colombian\r\n\t\t\t\t\twomen's organisations, to work with the implementation\r\n\t\t\t\t\tcommission on monitoring and guaranteeing the rights of\r\n\t\t\t\t\twomen in the implementation of the peace agreement.\r\n\t\t\t\t</p>\r\n\t\t\t</div>\r\n\t\t</section>\r\n\t\t<section data-id=\"time08\">\r\n\t\t\t<div class=\"col-medium\">\r\n\t\t\t\t<p style=\"text-align: center;\">\r\n\t\t\t\t\tTurning to the protection of human rights of women and\r\n\t\t\t\t\tgirls, these peace agreements include references to\r\n\t\t\t\t\tinternational human rights laws relating to women and\r\n\t\t\t\t\tgender, including specific human rights standards.\r\n\t\t\t\t</p>\r\n\t\t\t</div>\r\n\t\t</section>\r\n\t\t<section data-id=\"time09\">\r\n\t\t\t<div class=\"col-medium\">\r\n\t\t\t\t<p style=\"text-align: center;\">\r\n\t\t\t\t\tFor example, in a 1996 peace agreement from Guatemala, the\r\n\t\t\t\t\tgovernment agreed to revise national legislation to\r\n\t\t\t\t\teliminate all forms of discrimination against women, and to\r\n\t\t\t\t\tgive effect to the government commitments deriving from the\r\n\t\t\t\t\tratification of the Convention on the Elimination of All\r\n\t\t\t\t\tForms of Discrimination against Women.\r\n\t\t\t\t</p>\r\n\t\t\t</div>\r\n\t\t</section>\r\n\t</div>\r\n</Scroller>\r\n\r\n<Filler short={false} wide={true} center={true} shadow={false}>\r\n\t<p>When does gender get discussed in peace processes?</p>\r\n</Filler>\r\n\r\n<Filler short={false} wide={true} center={true} shadow={true}>\r\n\t<img\r\n\t\tsrc=\"./img/messy_1.png\"\r\n\t\talt=\"peace agreement example\"\r\n\t\tstyle=\"width: 100%;\"\r\n\t/>\r\n\t<p>\r\n\t\tIf peace negotiations went smoothly from one stage to the next, they\r\n\t\twould be represented by this blue line going steadily up.\r\n\t</p>\r\n</Filler>\r\n\r\n<Filler short={false} wide={true} center={true} shadow={true}>\r\n\t<img\r\n\t\tsrc=\"./img/messy_2.png\"\r\n\t\talt=\"peace agreement example\"\r\n\t\tstyle=\"width: 100%;\"\r\n\t/>\r\n\t<p>\r\n\t\tInstead, peace processes frequently involve a series of back-and-forth\r\n\t\tmovements, reflecting the reality that progress is rarely uniform or\r\n\t\tpredictable.\r\n\t</p>\r\n</Filler>\r\n\r\n<!-- <Filler short={false} wide={true} center={true} shadow={true}>\r\n\t<p>\r\n\t\tDividing all PA-X agreements into different peace process stages shows\r\n\t\tthe predominance of Pre-Negotiation, Ceasefire, and Substantive\r\n\t\t(Partial) agreements.\r\n\t</p>\r\n</Filler> -->\r\n\r\n<!-- STAGES -->\r\n<Scroller {threshold} bind:id={id[\"stage\"]} splitscreen={false} shadow={false}>\r\n\t<div slot=\"background\">\r\n\t\t<figure>\r\n\t\t\t<div class=\"col-wide height-full\">\r\n\t\t\t\t<div class=\"stage\">\r\n\t\t\t\t\t<Stages {pax_stages} {pax} {step} />\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</figure>\r\n\t</div>\r\n\r\n\t<div slot=\"foreground\">\r\n\t\t<section data-id=\"stage01\">\r\n\t\t\t<div class=\"col-medium\">\r\n\t\t\t\t<p style=\"text-align: center;\">\r\n\t\t\t\t\tDividing all PA-X agreements into different peace process\r\n\t\t\t\t\tstages shows the predominance of <strong\r\n\t\t\t\t\t\t>Pre-Negotiation, Ceasefire, and Partial</strong\r\n\t\t\t\t\t>\r\n\t\t\t\t\tagreements.\r\n\t\t\t\t</p>\r\n\t\t\t</div>\r\n\t\t</section>\r\n\t\t<section data-id=\"stage02\">\r\n\t\t\t<div class=\"col-medium\">\r\n\t\t\t\t<p style=\"text-align: center;\">\r\n\t\t\t\t\tA common perception is that dealing with 'gender' must wait\r\n\t\t\t\t\tuntil comprehensive stages of negotiations, so that\r\n\t\t\t\t\tpre-negotiation or ceasefire talks can focus on more\r\n\t\t\t\t\t'urgent' issues.\r\n\t\t\t\t</p>\r\n\t\t\t</div>\r\n\t\t</section>\r\n\t\t<section data-id=\"stage03\">\r\n\t\t\t<div class=\"col-medium\">\r\n\t\t\t\t<p style=\"text-align: center;\">\r\n\t\t\t\t\tFor example, the 2014 Brazzaville Agreement on Cessation of\r\n\t\t\t\t\tHostilities in Central African Republic included sexual\r\n\t\t\t\t\tviolence as an act that parties would cease under the\r\n\t\t\t\t\tagreement.\r\n\t\t\t\t</p>\r\n\t\t\t</div>\r\n\t\t</section>\r\n\t</div>\r\n</Scroller>\r\n\r\n<Filler short={false} wide={true} center={true} shadow={false}>\r\n\t<p class=\"text-big\">Geography</p>\r\n</Filler>\r\n\r\n<!-- Map -->\r\n<Scroller {threshold} bind:id={id[\"map\"]} splitscreen={false} shadow={false}>\r\n\t<div slot=\"background\">\r\n\t\t<figure>\r\n\t\t\t<div class=\"col-wide height-full\">\r\n\t\t\t\t<div class=\"map\">\r\n\t\t\t\t\t<Geography\r\n\t\t\t\t\t\t{mygeojson}\r\n\t\t\t\t\t\t{central_points}\r\n\t\t\t\t\t\t{pax}\r\n\t\t\t\t\t\t{pax_timeline}\r\n\t\t\t\t\t\t{pax_gender}\r\n\t\t\t\t\t\t{step}\r\n\t\t\t\t\t\ton:mapLoaded={handleMapLoaded}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</figure>\r\n\t</div>\r\n\r\n\t<div slot=\"foreground\">\r\n\t\t<section data-id=\"map01\">\r\n\t\t\t<div class=\"col-medium\">\r\n\t\t\t\t<p style=\"text-align: center;\">\r\n\t\t\t\t\tCountries where peace agreements have been signed since\r\n\t\t\t\t\t1990. The brighter the colour, the more signed agreements.\r\n\t\t\t\t</p>\r\n\t\t\t</div>\r\n\t\t</section>\r\n\t\t<section data-id=\"map02\">\r\n\t\t\t<div class=\"col-medium\">\r\n\t\t\t\t<p style=\"text-align: center;\">\r\n\t\t\t\t\tCountries with at least 2 signed agreements containing\r\n\t\t\t\t\treferences to gender.\r\n\t\t\t\t</p>\r\n\t\t\t</div>\r\n\t\t</section>\r\n\t\t<section data-id=\"map03\">\r\n\t\t\t<div class=\"col-medium\">\r\n\t\t\t\t<p style=\"text-align: center;\">\r\n\t\t\t\t\tLet's have a closer look at Afghanistan.\r\n\t\t\t\t</p>\r\n\t\t\t</div>\r\n\t\t</section>\r\n\t\t<!-- <section data-id=\"map04\">\r\n\t\t\t<div class=\"col-medium\">\r\n\t\t\t\t<p style=\"text-align: center;\">references to un 1325</p>\r\n\t\t\t</div>\r\n\t\t</section> -->\r\n\t</div>\r\n</Scroller>\r\n\r\n<Filler short={false} wide={true} center={true} shadow={true}></Filler>\r\n\r\n<!-- TIME -->\r\n<Scroller\r\n\t{threshold}\r\n\tbind:id={id[\"afgh\"]}\r\n\tsplitscreen={false}\r\n\tshadow={false}\r\n>\r\n\t<div slot=\"background\">\r\n\t\t<figure>\r\n\t\t\t<div class=\"col-wide height-full\">\r\n\t\t\t\t<div class=\"afgh\">\r\n\t\t\t\t\t<Afghanistan {pax} {pax_timeline} {step} {afghanistan} />\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</figure>\r\n\t</div>\r\n\r\n\t<div slot=\"foreground\">\r\n\t\t<section data-id=\"afgh01\">\r\n\t\t\t<div class=\"col-medium\">\r\n\t\t\t\t<p style=\"text-align: center;\">\r\n\t\t\t\t\tEach line represents a peace agreements listed on PA-X that\r\n\t\t\t\t\twas reached between 1990 and 2023.\r\n\t\t\t\t</p>\r\n\t\t\t</div>\r\n\t\t</section>\r\n\t\t<section data-id=\"afgh02\">\r\n\t\t\t<div class=\"col-medium\">\r\n\t\t\t\t<p style=\"text-align: center;\">\r\n\t\t\t\t\tPA-X Gender agreements over time.\r\n\t\t\t\t</p>\r\n\t\t\t</div>\r\n\t\t</section>\r\n\t\t<section data-id=\"afgh03\">\r\n\t\t\t<div class=\"col-medium\">\r\n\t\t\t\t<p style=\"text-align: center;\">\r\n\t\t\t\t\tIt's crucial to emphasize that gender references can differ\r\n\t\t\t\t\thugely in terms of their substantive quality and\r\n\t\t\t\t\tspecificity, ranging from detailed commitments to rhetorical\r\n\t\t\t\t\treferences to 'women'.\r\n\t\t\t\t</p>\r\n\t\t\t</div>\r\n\t\t</section>\r\n\t</div>\r\n</Scroller>\r\n\r\n<!-- <Filler short={true} wide={true} center={true} shadow={true}>\r\n\t<p class=\"text-big\">\r\n\t\tHow do we gather the agreements? How are they processed? [where to\r\n\t\tinclude provenance?<br /> beginning/end/between sections?]\r\n\t</p>\r\n</Filler> -->\r\n\r\n<!-- <Scroller {threshold} bind:id={id[\"prov\"]} splitscreen={false} shadow={true}>\r\n\t<div slot=\"background\">\r\n\t\t<figure>\r\n\t\t\t<div class=\"col-wide height-full\">\r\n\t\t\t\t<div class=\"close_read\">\r\n\t\t\t\t\t<img id=\"agreement\" alt=\"notes\" src=\"./img/sources.jpg\" />\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</figure>\r\n\t</div>\r\n\r\n\t<div slot=\"foreground\">\r\n\t\t<section data-id=\"prov01\">\r\n\t\t\t<div class=\"col-medium\">\r\n\t\t\t\t<p style=\"text-align: center;\">sources</p>\r\n\t\t\t</div>\r\n\t\t</section>\r\n\t\t<section data-id=\"prov02\">\r\n\t\t\t<div class=\"col-medium\">\r\n\t\t\t\t<p style=\"text-align: center;\">\r\n\t\t\t\t\ttranslation/transcription/coding/data entry\r\n\t\t\t\t\t<img id=\"agreement\" alt=\"notes\" src=\"./img/diagram.png\" />\r\n\t\t\t\t</p>\r\n\t\t\t</div>\r\n\t\t</section>\r\n\t</div>\r\n</Scroller> -->\r\n\r\n<style>\r\n\t#loading_screen {\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t\tposition: absolute;\r\n\t\ttop: 0px;\r\n\t\tleft: 0px;\r\n\t\tbackground-color: black;\r\n\t\tdisplay: flex;\r\n\t\tjustify-content: center;\r\n\t\tz-index: 3;\r\n\t}\r\n\r\n\t#loading_text {\r\n\t\tposition: absolute;\r\n\t\ttop: 40%;\r\n\t\tcolor: rgb(255, 255, 255);\r\n\t\tmargin: 0px;\r\n\t\tfont-weight: 300;\r\n\t\tfont-size: 16px;\r\n\t}\r\n\r\n\t#loading_button {\r\n\t\tfont-family: \"Montserrat\";\r\n\t\tfont-size: 14px;\r\n\t\tfont-weight: 400;\r\n\t\tposition: absolute;\r\n\t\ttop: 40%;\r\n\t\tbackground-color: black;\r\n\t\tcolor: white;\r\n\t\tborder: 1px solid rgb(69, 69, 69);\r\n\t\tborder-radius: 2px;\r\n\t\tpadding: 10px 15px;\r\n\t\tcursor: pointer;\r\n\t\ttransition:\r\n\t\t\tbackground-color 0.2s ease,\r\n\t\t\tcolor 0.2s ease;\r\n\t\tvisibility: hidden;\r\n\t}\r\n\r\n\t#loading_button:hover {\r\n\t\tbackground-color: white;\r\n\t\tcolor: black;\r\n\t}\r\n\r\n\t.rect,\r\n\t.time,\r\n\t.map,\r\n\t.stage,\r\n\t.afgh {\r\n\t\tmargin-top: 40px;\r\n\t\twidth: calc(100% - 5px);\r\n\t}\r\n\r\n\t#icons {\r\n\t\tmargin: 50px;\r\n\t\tdisplay: flex;\r\n\t\tflex-wrap: wrap; /* Allows items to wrap onto the next line */\r\n\t\tjustify-content: space-between; /* Adjust spacing between items */\r\n\t}\r\n\r\n\t.icon-item {\r\n\t\tflex: 1 1 calc(33.33% - 10px); /* Ensure three items per row, with some spacing */\r\n\t\tmargin: 5px; /* Adds spacing between items */\r\n\t\ttext-align: center; /* Center content inside the items */\r\n\t\tpadding: 20px; /* Example padding */\r\n\t\tbox-sizing: border-box; /* Ensures padding is included in width calculation */\r\n\t}\r\n\r\n\t@media (max-width: 768px) {\r\n\t\t.icon-item {\r\n\t\t\tflex: 1 1 100%; /* Items stack on top of each other on small screens */\r\n\t\t}\r\n\t}\r\n\r\n\t.close_read {\r\n\t\tdisplay: flex;\r\n\t\tjustify-content: center; /* Centers horizontally */\r\n\t\talign-items: center; /* Centers vertically */\r\n\t\theight: 100%; /* Takes up the full height of the parent */\r\n\t}\r\n</style>\r\n",
    "<script>\r\n  import { themes } from \"../config.js\";\r\n  import { getContext } from \"svelte\";\r\n\r\n  export let theme = getContext(\"theme\");\r\n\r\n</script>\r\n\r\n<hr style=\"color: {themes[theme]}\" />\r\n\r\n<style>\r\n  hr {\r\n    width: 80%;\r\n    color: rgb(66, 66, 66);\r\n    border: none;\r\n    border-top: 1px solid;\r\n  }\r\n</style>\r\n",
    "<script>\r\n\texport let center = true;\r\n\texport let wide = false;\r\n\texport let short = false;\r\n\texport let shadow;\r\n\r\n\tlet shadow_css = ``;\r\n\tif (shadow) {\r\n\t\tshadow_css = `box-shadow: 0 10px 10px -8px rgba(50, 50, 50, 1)`;\r\n\t}\r\n</script>\r\n\r\n<section>\r\n\t<div\r\n\t\tclass=\"middle\"\r\n\t\tclass:center\r\n\t\tclass:col-medium={!wide}\r\n\t\tclass:col-wide={wide}\r\n\t\tclass:height-full={!short}\r\n\t\tclass:short\r\n\t>\r\n\t\t<slot></slot>\r\n\t</div>\r\n</section>\r\n\r\n<style>\r\n\tsection {\r\n\t\tmargin: 50px;\r\n\t}\r\n</style>\r\n",
    "<script>\r\n  export let bgimage = null;\r\n  export let bgfixed = false;\r\n  export let center = true;\r\n  export let short = false;\r\n\r\n  let style = '';\r\n\r\n  if (bgimage) {\r\n    style += `background-image: url(${bgimage});`;\r\n  } else {\r\n    style += 'background-image: none;';\r\n  }\r\n\r\n  if (bgfixed) {\r\n    style += ' background-attachment: fixed;';\r\n  }\r\n</script>\r\n\r\n<style>\r\n  .short {\r\n    min-height: 85vh;\r\n  }\r\n  .v-padded {\r\n    box-sizing: border-box;\r\n    padding: 40px 0;\r\n  }\r\n</style>\r\n\r\n<header style=\"color: white}; background-color: black; {style}\" class:short>\r\n\t<div class=\"v-padded col-wide middle\" style=\"position: relative\" class:short class:height-full={!short}>\r\n\t\t<div class:center>\r\n\t\t\t<slot></slot>\r\n    </div>\r\n\t</div>\r\n</header>",
    "<script>\n\timport { themes } from '../config.js';\n\timport { getContext } from 'svelte';\n\n\texport let theme = getContext('theme');\n</script>\n\n<footer style=\"color: {themes[theme]['text']}; background-color: {themes[theme]['pale']};\">\n\t<div class=\"col-wide\" data-analytics=\"footer\">\n\t\t<a href=\"https://www.ons.gov.uk/\">\n\t\t\t{#if theme == 'dark'}\n\t\t\t<img\n\t\t\t\tclass=\"logo-img\"\n\t\t\t\tsrc=\"./img/ons-logo-neg-en.svg\"\n\t\t\t\talt=\"Office for National Statistics\" />\n\t\t\t{:else}\n\t\t\t<img\n\t\t\t\tclass=\"logo-img\"\n\t\t\t\tsrc=\"./img/ons-logo-black-en.svg\"\n\t\t\t\talt=\"Office for National Statistics\" />\n\t\t\t{/if}\n\t\t</a>\n\t\t<ul>\n\t\t\t<li><a href=\"https://www.ons.gov.uk/aboutus/contactus\" class=\"link\" style=\"color: {themes[theme]['text']}\">Contact us</a></li>\n\t\t\t<li><a href=\"https://www.ons.gov.uk/help/privacynotice\" class=\"link\" style=\"color: {themes[theme]['text']}\">Cookies and privacy</a></li>\n\t\t</ul>\n\t\t<hr style=\"border-top-color: {themes[theme]['muted']}\" />\n\t\t<div class=\"license\">\n\t\t\t<svg class=\"ogl-img\" viewBox=\"0 0 59 24\" xmlns=\"http://www.w3.org/2000/svg\">\n\t\t\t\t<title>UK Open Government Licence</title>\n\t\t\t\t<path fill=\"{themes[theme]['muted']}\" d=\"M59,17.5v6.2H45.3V4l6.2-3.9v17.4H59z M33.6,13h9.8v10.7H43L40.6,21c-2.1,1.8-4.9,3-7.9,3 c-4.4,0-8.3-2.4-10.4-6.1c-2.1,3.6-5.9,6.1-10.4,6.1C5.4,23.9,0,18.6,0,12C0,5.4,5.4,0.1,11.9,0.1c4.5,0,8.4,2.5,10.4,6.1 c2.1-3.6,5.9-6.1,10.4-6.1c4.2,0,7.9,2.2,10.1,5.5l-5.2,3.3c-1-1.6-2.8-2.7-4.8-2.7C29.6,6.2,27,8.8,27,12s2.6,5.8,5.8,5.8 c1.5,0,2.8-0.5,3.8-1.4L33.6,13z M17.7,12c0-3.2-2.6-5.7-5.8-5.7S6.2,8.8,6.2,12s2.6,5.8,5.8,5.8S17.7,15.2,17.7,12z\"/>\n\t\t\t</svg>\n\t\t\tAll content is available under the\n\t\t\t<a\n\t\t\t\thref=\"https://www.nationalarchives.gov.uk/doc/open-government-licence/version/3/\"\n\t\t\t\tclass=\"link\"\n\t\t\t\ttarget=\"_blank\"\n\t\t\t\trel=\"noopener\"\n\t\t\t\tstyle=\"color: {themes[theme]['text']}\">Open Government Licence v3.0</a>, \n\t\t\texcept where otherwise stated\n\t\t</div>\n\t</div>\n</footer>\n\n<style>\n\tfooter {\n\t\tpadding-bottom: 72px;\n\t\tpadding-top: 36px;\n\t\tfont-size: 18px;\n\t}\n\tfooter a.link {\n\t\t-webkit-box-sizing: border-box;\n\t\tbox-sizing: border-box;\n\t\ttext-decoration: underline;\n\t\tdisplay: inline-block;\n\t}\n\tfooter a.link:hover {\n\t\ttext-decoration: none;\n\t}\n\tfooter a.link:active {\n\t\toutline: 3px solid transparent;\n\t\tbackground-color: #fd0;\n\t\t-webkit-box-shadow: 0 -2px #fd0, 0 4px #222;\n\t\tbox-shadow: 0 -2px #fd0, 0 4px #222;\n\t\tcolor: #222;\n\t\ttext-decoration: none;\n\t}\n\tfooter hr {\n\t\tmargin-bottom: 27px;\n\t\tmargin-top: 36px;\n\t\tborder: none;\n\t\tborder-top: 1px solid #777;\n\t}\n\tul {\n\t\tpadding: 0;\n\t\tmargin: 0;\n\t}\n\tli {\n\t\tmargin-right: 18px;\n\t\tdisplay: inline-block;\n\t}\n\t.logo-img {\n\t\tmargin-bottom: 27px;\n\t}\n\t.ogl-img {\n\t\tmargin: 0 0.5rem 0.2rem 0;\n\t\twidth: 59px;\n\t\theight: 24px;\n\t\tvertical-align: middle;\n\t}\n\t.license {\n\t\tvertical-align: top;\n\t}\n\ta img:hover {\n\t\tcursor: pointer;\n\t}\n</style>",
    "<script>\r\n\timport { themes } from \"../config.js\";\r\n\timport { getContext } from \"svelte\";\r\n\r\n\texport let theme = getContext(\"theme\");\r\n\texport let filled = true;\r\n\texport let center = true;\r\n</script>\r\n\r\n<nav\r\n\tstyle=\"border-bottom-color: {themes[theme]['muted']}; {filled\r\n\t\t? 'background-color: ' + themes[theme]['background'] + ';'\r\n\t\t: ''}\"\r\n>\r\n\t<div\r\n\t\tclass=\"col-wide\"\r\n\t\tstyle=\"margin-left:0px; margin-top:0px\"\r\n\t\tclass:center\r\n\t></div>\r\n</nav>\r\n\r\n<style>\r\n\tnav {\r\n\t\t-webkit-box-sizing: border-box;\r\n\t\tbox-sizing: border-box;\r\n\t\tposition: relative;\r\n\t\theight: 50px;\r\n\t\tz-index: 1;\r\n\t\tmargin-bottom: -50px;\r\n\t}\r\n</style>\r\n",
    "<script context=\"module\">\r\n\t// Based on svelte-scroller by Rich Harris\r\n\t// https://github.com/sveltejs/svelte-scroller\r\n\t// Patched to transpile to IE 11 and allow for split-screen view option\r\n\r\n\tconst handlers = [];\r\n\tlet manager;\r\n\r\n\tif (typeof window !== \"undefined\") {\r\n\t\tconst run_all = () => handlers.forEach((fn) => fn());\r\n\r\n\t\twindow.addEventListener(\"scroll\", run_all);\r\n\t\twindow.addEventListener(\"resize\", run_all);\r\n\t}\r\n\r\n\tif (typeof IntersectionObserver !== \"undefined\") {\r\n\t\tconst map = new Map();\r\n\r\n\t\tconst observer = new IntersectionObserver(\r\n\t\t\t(entries, observer) => {\r\n\t\t\t\tentries.forEach((entry) => {\r\n\t\t\t\t\tconst update = map.get(entry.target);\r\n\t\t\t\t\tconst index = handlers.indexOf(update);\r\n\r\n\t\t\t\t\tif (entry.isIntersecting) {\r\n\t\t\t\t\t\tif (index === -1) handlers.push(update);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tupdate();\r\n\t\t\t\t\t\tif (index !== -1) handlers.splice(index, 1);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\trootMargin: \"400px 0px\", // TODO why 400?\r\n\t\t\t},\r\n\t\t);\r\n\r\n\t\tmanager = {\r\n\t\t\tadd: ({ outer, update }) => {\r\n\t\t\t\tconst { top, bottom } = outer.getBoundingClientRect();\r\n\r\n\t\t\t\tif (top < window.innerHeight && bottom > 0)\r\n\t\t\t\t\thandlers.push(update);\r\n\r\n\t\t\t\tmap.set(outer, update);\r\n\t\t\t\tobserver.observe(outer);\r\n\t\t\t},\r\n\r\n\t\t\tremove: ({ outer, update }) => {\r\n\t\t\t\tconst index = handlers.indexOf(update);\r\n\t\t\t\tif (index !== -1) handlers.splice(index, 1);\r\n\r\n\t\t\t\tmap.delete(outer);\r\n\t\t\t\tobserver.unobserve(outer);\r\n\t\t\t},\r\n\t\t};\r\n\t} else {\r\n\t\tmanager = {\r\n\t\t\tadd: ({ update }) => {\r\n\t\t\t\thandlers.push(update);\r\n\t\t\t},\r\n\r\n\t\t\tremove: ({ update }) => {\r\n\t\t\t\tconst index = handlers.indexOf(update);\r\n\t\t\t\tif (index !== -1) handlers.splice(index, 1);\r\n\t\t\t},\r\n\t\t};\r\n\t}\r\n</script>\r\n\r\n<script>\r\n\timport { onMount } from \"svelte\";\r\n\r\n\t// config\r\n\texport let top = 0;\r\n\texport let bottom = 1;\r\n\texport let threshold = 0.5;\r\n\texport let query = \"section\";\r\n\texport let parallax = false;\r\n\texport let shadow;\r\n\r\n\t// bindings\r\n\texport let index = 0;\r\n\texport let count = 0;\r\n\texport let offset = 0;\r\n\texport let progress = 0;\r\n\texport let visible = false;\r\n\texport let splitscreen = false; // Add class to allow for split screen option\r\n\texport let id = null;\r\n\r\n\tlet outer;\r\n\tlet bgContainer; // IE patch. Container binding to update inline style\r\n\tlet foreground;\r\n\tlet background;\r\n\tlet left;\r\n\tlet sections;\r\n\tlet wh = 0;\r\n\tlet fixed;\r\n\tlet offset_top;\r\n\tlet width = 1;\r\n\tlet height;\r\n\tlet inverted;\r\n\r\n\t$: top_px = Math.round(top * wh);\r\n\t$: bottom_px = Math.round(bottom * wh);\r\n\t$: threshold_px = Math.round(threshold * wh);\r\n\t$: top, bottom, threshold, parallax, update();\r\n\r\n\tonMount(() => {\r\n\t\tsections = foreground.querySelectorAll(query);\r\n\t\tcount = sections.length;\r\n\r\n\t\tupdate();\r\n\r\n\t\tconst scroller = { outer, update };\r\n\r\n\t\tmanager.add(scroller);\r\n\t\treturn () => manager.remove(scroller);\r\n\t});\r\n\r\n\t// IE patch. BG container style (fixed/unfixed) set via function\r\n\tfunction setFixed() {\r\n\t\tif (bgContainer) {\r\n\t\t\tlet style = `position: ${fixed ? \"fixed\" : \"absolute\"}; top: 0; transform: translate(0, ${offset_top}px); width: ${width}px; z-index: ${inverted ? 3 : 1};`;\r\n\t\t\tbgContainer.style.cssText = style;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction update() {\r\n\t\tif (!foreground) return;\r\n\r\n\t\t// re-measure outer container\r\n\t\tconst bcr = outer.getBoundingClientRect();\r\n\t\tleft = bcr.left;\r\n\t\twidth = bcr.right - bcr.left;\r\n\r\n\t\t// determine fix state\r\n\t\tconst fg = foreground.getBoundingClientRect();\r\n\t\tconst bg = background.getBoundingClientRect();\r\n\r\n\t\tvisible = fg.top < wh && fg.bottom > 0;\r\n\r\n\t\tconst foreground_height = fg.bottom - fg.top;\r\n\t\tconst background_height = bg.bottom - bg.top;\r\n\r\n\t\tconst available_space = bottom_px - top_px;\r\n\t\tprogress = (top_px - fg.top) / (foreground_height - available_space);\r\n\r\n\t\tif (progress <= 0) {\r\n\t\t\toffset_top = 0;\r\n\t\t\tif (fixed) {\r\n\t\t\t\tfixed = false;\r\n\t\t\t\tsetFixed();\r\n\t\t\t} // Non-IE specific patch to avoid setting style repeatedly\r\n\t\t} else if (progress >= 1) {\r\n\t\t\toffset_top = parallax\r\n\t\t\t\t? foreground_height - background_height\r\n\t\t\t\t: foreground_height - available_space;\r\n\t\t\tif (fixed) {\r\n\t\t\t\tfixed = false;\r\n\t\t\t\tsetFixed();\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\toffset_top = parallax\r\n\t\t\t\t? Math.round(\r\n\t\t\t\t\t\ttop_px -\r\n\t\t\t\t\t\t\tprogress * (background_height - available_space),\r\n\t\t\t\t\t)\r\n\t\t\t\t: top_px;\r\n\t\t\tif (!fixed) {\r\n\t\t\t\tfixed = true;\r\n\t\t\t\tsetFixed();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfor (index = 0; index < sections.length; index += 1) {\r\n\t\t\tconst section = sections[index];\r\n\t\t\tconst { top } = section.getBoundingClientRect();\r\n\r\n\t\t\tconst next = sections[index + 1];\r\n\t\t\tconst bottom = next ? next.getBoundingClientRect().top : fg.bottom;\r\n\r\n\t\t\toffset = (threshold_px - top) / (bottom - top);\r\n\t\t\tid = section.dataset.id ? section.dataset.id : null;\r\n\t\t\tif (bottom >= threshold_px) break;\r\n\t\t}\r\n\t}\r\n\r\n\tlet shadow_css = ``;\r\n\tif (shadow) {\r\n\t\tshadow_css = `box-shadow: inset 0 -10px 10px -8px rgba(0, 0, 0, 1); background-color: gray`;\r\n\t}\r\n</script>\r\n\r\n<svelte:window bind:innerHeight={wh} />\r\n\r\n<svelte-scroller-outer bind:this={outer} class:splitscreen style={shadow_css}>\r\n\t<svelte-scroller-background-container\r\n\t\tclass=\"background-container\"\r\n\t\tbind:this={bgContainer}\r\n\t>\r\n\t\t<svelte-scroller-background bind:this={background}>\r\n\t\t\t<slot name=\"background\"></slot>\r\n\t\t</svelte-scroller-background>\r\n\t</svelte-scroller-background-container>\r\n\r\n\t<svelte-scroller-foreground bind:this={foreground}>\r\n\t\t<slot name=\"foreground\"></slot>\r\n\t</svelte-scroller-foreground>\r\n</svelte-scroller-outer>\r\n\r\n<style>\r\n\tsvelte-scroller-outer {\r\n\t\tdisplay: block;\r\n\t\tposition: relative;\r\n\t\tmax-width: 100%;\r\n\t}\r\n\r\n\tsvelte-scroller-background {\r\n\t\tdisplay: block;\r\n\t\tposition: relative;\r\n\t\twidth: 100%;\r\n\t}\r\n\r\n\tsvelte-scroller-foreground {\r\n\t\tdisplay: block;\r\n\t\tposition: relative;\r\n\t\tz-index: 2;\r\n\t}\r\n\r\n\tsvelte-scroller-foreground::after {\r\n\t\tcontent: \" \";\r\n\t\tdisplay: block;\r\n\t\tclear: both;\r\n\t}\r\n\r\n\tsvelte-scroller-background-container {\r\n\t\tdisplay: block;\r\n\t\tposition: absolute;\r\n\t\twidth: 100%;\r\n\t\tmax-width: 100%;\r\n\t\tpointer-events: none;\r\n\t\t/* height: 100%; */\r\n\r\n\t\t/* in theory this helps prevent jumping */\r\n\t\twill-change: transform;\r\n\t\t/* -webkit-transform: translate3d(0, 0, 0);\r\n\t\t-moz-transform: translate3d(0, 0, 0);\r\n\t\ttransform: translate3d(0, 0, 0); */\r\n\t}\r\n</style>\r\n",
    "<script>\r\n    import * as d3 from \"d3\";\r\n    import IndividualRectangle from \"./IndividualRectangle.svelte\";\r\n    import { years } from \"../utils\";\r\n\r\n    export let pax;\r\n    export let pax_timeline;\r\n    export let step;\r\n    export let afghanistan;\r\n\r\n    let width = 400;\r\n    let height = 400;\r\n    let gender_text = [];\r\n    let rendered_data;\r\n    let innerWidth, innerHeight, xScale, yScale;\r\n    let margin = { top: 20, right: 20, bottom: 20, left: 40 };\r\n\r\n    $: innerWidth = width - margin.left - margin.right;\r\n    $: innerHeight = height - margin.top - margin.bottom;\r\n\r\n    $: xScale = d3\r\n        .scaleBand()\r\n        .domain(years)\r\n        .range([0, innerWidth])\r\n        .padding(0.1);\r\n\r\n    $: yScale = d3.scaleLinear().domain([0, 100]).range([innerHeight, 0]);\r\n    $: yHeight = d3.scaleLinear().domain([0, 40000]).range([0, innerHeight]);\r\n\r\n    function position_calc(pax, innerWidth, filter) {\r\n        let previousYear = null; // Track the last year seen\r\n        let index;\r\n        index = filter === \"none\" ? 0 : -1;\r\n\r\n        let calculated_positions = pax.map((d) => {\r\n            let yPosition;\r\n\r\n            const currentYear = d.Dat.substring(6, 10);\r\n            // Reset index if the year has changed\r\n            if (currentYear !== previousYear) {\r\n                index = filter === \"none\" ? 0 : -1;\r\n                previousYear = currentYear;\r\n            }\r\n\r\n            if (filter == \"none\") {\r\n                yPosition = yScale(index);\r\n            } else {\r\n                yPosition =\r\n                    d[filter] === \"1\" ? yScale(++index) : innerHeight + 100;\r\n            }\r\n\r\n            const result = {\r\n                x: xScale(currentYear) + Math.random() * 2 - 1,\r\n                y: yPosition + Math.random() * 2 - 1,\r\n                width: xScale.bandwidth(),\r\n                height: 3,\r\n                info: d.Agt,\r\n            };\r\n\r\n            if (filter === \"none\") index++;\r\n            return result;\r\n        });\r\n        return calculated_positions;\r\n    }\r\n\r\n    //initial functions\r\n    $: if (pax) {\r\n        let previousYear = null; // Track the last year seen\r\n        let index = 0; // Index that changes based on GeWom value\r\n        rendered_data = pax.map((d) => {\r\n            const currentYear = d.Dat.substring(6, 10);\r\n\r\n            // Reset index if the year has changed\r\n            if (currentYear !== previousYear) {\r\n                index = 0;\r\n                previousYear = currentYear;\r\n            }\r\n\r\n            // Determine y position based on GeWom value\r\n            const yPosition =\r\n                d.Con === \"Afghanistan\" ? yScale(++index) : innerHeight + 100;\r\n\r\n            return {\r\n                x: xScale(currentYear),\r\n                y: yPosition,\r\n                width: xScale.bandwidth(),\r\n                height: 3,\r\n            };\r\n        });\r\n    }\r\n    //steps\r\n    $: if (step == \"afgh01\") {\r\n        let previousYear = null; // Track the last year seen\r\n        let index = 0; // Index that changes based on GeWom value\r\n        rendered_data = pax.map((d) => {\r\n            const currentYear = d.Dat.substring(6, 10);\r\n\r\n            // Reset index if the year has changed\r\n            if (currentYear !== previousYear) {\r\n                index = 0;\r\n                previousYear = currentYear;\r\n            }\r\n\r\n            // Determine y position based on GeWom value\r\n            const yPosition =\r\n                d.Con === \"Afghanistan\" ? yScale(++index) : innerHeight + 100;\r\n\r\n            return {\r\n                x: xScale(currentYear),\r\n                y: yPosition,\r\n                width: xScale.bandwidth(),\r\n                height: 3,\r\n            };\r\n        });\r\n    } else if (step == \"afgh02\") {\r\n        let index = 0; // Index that changes based on GeWom value\r\n        rendered_data = pax.map((d) => {\r\n            // Calculate the width of each part and apply a gap\r\n            const partWidth = innerWidth / 22;\r\n            const elementWidth = partWidth - 4; // Leave 4px gap\r\n\r\n            // Set x position based on the current index\r\n            const xPosition = index * partWidth;\r\n\r\n            // Determine y position based on GeWom value\r\n            const yPosition = d.Con === \"Afghanistan\" ? 10 : innerHeight + 100;\r\n\r\n            // Increment index only if d.Con is \"Afghanistan\"\r\n            if (d.Con === \"Afghanistan\") {\r\n                index++;\r\n                // Reset index if it exceeds 22 parts to loop back\r\n                if (index >= 22) {\r\n                    index = 0;\r\n                }\r\n            }\r\n\r\n            return {\r\n                x: xPosition,\r\n                y: yPosition,\r\n                width: elementWidth,\r\n                height: 3,\r\n                info: d.info,\r\n            };\r\n        });\r\n    } else if (step == \"afgh03\") {\r\n        // all agreements\r\n        //lenghts of agreements and gender text highlight\r\n        gender_text = []; // Reset before populating it in this step\r\n        function construct_gender(id, x, w, h, y) {\r\n            let filteredResults = afghanistan.filter(\r\n                (item) => item.AgtID === id,\r\n            );\r\n\r\n            if (filteredResults.length !== 0) {\r\n                filteredResults.forEach((d) => {\r\n                    // Push the new object into the persistent `blaa` array\r\n                    gender_text.push({\r\n                        x: x,\r\n                        y: y + (h / 100) * d.provisionLocation,\r\n                        width: w,\r\n                        height: 3,\r\n                    });\r\n                });\r\n                // Reassign to itself to trigger reactivity\r\n                gender_text = [...gender_text];\r\n            }\r\n        }\r\n\r\n        let index = 0; // Index that changes based on GeWom value\r\n        rendered_data = pax.map((d) => {\r\n            // Calculate the width of each part and apply a gap\r\n            const partWidth = innerWidth / 22;\r\n            const elementWidth = partWidth - 4; // Leave 4px gap\r\n\r\n            // Set x position based on the current index\r\n            let xPosition = index * partWidth;\r\n            let agt_height;\r\n            let yPosition;\r\n            // Increment index only if d.Con is \"Afghanistan\"\r\n            if (d.Con === \"Afghanistan\") {\r\n                index++;\r\n                // Reset index if it exceeds 22 parts to loop back\r\n                if (index >= 22) {\r\n                    index = 0;\r\n                }\r\n\r\n                yPosition = 10;\r\n                agt_height = yHeight(d.N_characters);\r\n                construct_gender(\r\n                    d.AgtId,\r\n                    xPosition,\r\n                    elementWidth,\r\n                    agt_height,\r\n                    yPosition,\r\n                );\r\n            } else {\r\n                yPosition = innerHeight + 100;\r\n                agt_height = 0;\r\n            }\r\n\r\n            return {\r\n                x: xPosition,\r\n                y: yPosition,\r\n                width: elementWidth,\r\n                height: agt_height,\r\n                info: d.Agt,\r\n            };\r\n        });\r\n    }\r\n\r\n    function formatMobile(tick) {\r\n        return \"'\" + tick.toString().slice(-2);\r\n    }\r\n\r\n    $: console.log(step);\r\n</script>\r\n\r\n{#if rendered_data && pax_timeline}\r\n    <div class=\"wrapper\" bind:clientWidth={width} bind:clientHeight={height}>\r\n        <svg {width} {height}>\r\n            <g\r\n                class=\"timeline\"\r\n                transform=\"translate({margin.left}, {margin.top})\"\r\n            >\r\n                {#each rendered_data as d, i}\r\n                    <IndividualRectangle\r\n                        {i}\r\n                        id={d.id}\r\n                        x={d.x}\r\n                        y={d.y}\r\n                        width={d.width}\r\n                        height={d.height}\r\n                        info={d.info}\r\n                    />\r\n                {/each}\r\n                {#each gender_text as d}\r\n                    <rect\r\n                        class=\"gender_text\"\r\n                        x={d.x + 2}\r\n                        y={+d.y - 2}\r\n                        width={d.width - 4}\r\n                        height={d.height}\r\n                        fill=\"black\"\r\n                    />\r\n                {/each}\r\n            </g>\r\n        </svg>\r\n    </div>\r\n{/if}\r\n\r\n<style>\r\n    .wrapper {\r\n        height: 90vh;\r\n        position: relative;\r\n    }\r\n    .tick {\r\n        font-size: 0.725em;\r\n        font-weight: 200;\r\n    }\r\n\r\n    .un_resolution {\r\n        visibility: hidden;\r\n    }\r\n\r\n    .tick text {\r\n        fill: white;\r\n        text-anchor: start;\r\n        font-size: 12px;\r\n        font-family: \"Montserrat\";\r\n        font-weight: 400;\r\n    }\r\n\r\n    @media only screen and (max-width: 1200px) {\r\n        .tick text {\r\n            font-size: 11px;\r\n        }\r\n    }\r\n\r\n    @media only screen and (max-width: 768px) {\r\n        .tick text {\r\n            font-size: 10px;\r\n        }\r\n    }\r\n\r\n    .x-axis .tick text {\r\n        text-anchor: middle;\r\n    }\r\n\r\n    #example {\r\n        position: absolute;\r\n        top: 0;\r\n        left: 0;\r\n        width: 100%; /* Full width of the parent/container */\r\n        height: 100%; /* Full height of the parent/container if needed */\r\n        display: flex; /* Enables flexbox for centering */\r\n        justify-content: center;\r\n        overflow: hidden; /* Prevents content overflow */\r\n        opacity: 0;\r\n        transition: 0.5s ease;\r\n    }\r\n\r\n    #example img {\r\n        position: absolute;\r\n        top: 0px;\r\n        max-width: 80%; /* Ensures the image scales within the width of its container */\r\n        height: auto; /* Maintains the aspect ratio of the image */\r\n        display: block; /* Removes extra space below the image (from inline elements) */\r\n    }\r\n</style>\r\n",
    "<script>\r\n    import { tweened } from \"svelte/motion\";\r\n    import { cubicOut } from \"svelte/easing\";\r\n\r\n    export let i;\r\n    export let x;\r\n    export let y;\r\n    export let width;\r\n    export let height;\r\n    export let info;\r\n\r\n    // Define position tween parameters with staggered delay\r\n    const positionTweenParams = {\r\n        delay: (i / 4) * Math.random(), // Delay increases with index\r\n        duration: 300,\r\n        easing: cubicOut,\r\n    };\r\n\r\n    const tX = tweened(null, positionTweenParams);\r\n    const tY = tweened(null, positionTweenParams);\r\n    const tWidth = tweened(null, { duration: 300, easing: cubicOut });\r\n    const tHeight = tweened(null, positionTweenParams);\r\n\r\n    // Update position tweens after size animation completes\r\n    $: tX.set(x);\r\n    $: tY.set(y);\r\n    $: tWidth.set(width);\r\n    $: tHeight.set(height);\r\n\r\n</script>\r\n\r\n<g transform=\"translate({$tX} {$tY})\">\r\n    <rect\r\n        x=\"0\"\r\n        y=\"0\"\r\n        width={$tWidth}\r\n        height={$tHeight}\r\n        rx=\"1\"\r\n        fill=\"#F6F1D6\"\r\n        stroke=\"gray\"\r\n        stroke-width=\"0.5\"\r\n    />\r\n</g>\r\n\r\n<style>\r\n    rect {\r\n        fill: rgb(0, 0, 0);\r\n    }\r\n\r\n</style>\r\n",
    "<script>\r\n\timport { onMount, onDestroy, setContext } from 'svelte';\r\n\r\n\texport let width;\r\n\texport let height;\r\n\texport let contextName = 'canvas';\r\n\r\n\tconst drawFunctions = [];\r\n\r\n\tlet canvas;\r\n\tlet ctx;\r\n\tlet pendingInvalidation = false;\r\n\tlet frameId;\r\n\r\n\tfunction scaleCanvas(canvas, ctx, width, height) {\r\n\t\tconst devicePixelRatio = window.devicePixelRatio || 1;\r\n\r\n\t\tcanvas.width = width * devicePixelRatio;\r\n\t\tcanvas.height = height * devicePixelRatio;\r\n\t\tcanvas.style.width = width + 'px';\r\n\t\tcanvas.style.height = height + 'px';\r\n\r\n\t\tctx.scale(devicePixelRatio, devicePixelRatio);\r\n\t}\r\n\r\n\tfunction update() {\r\n\t\tif (!ctx) return;\r\n\r\n\t\tctx.clearRect(0, 0, width, height);\r\n\r\n\t\tdrawFunctions.forEach((fn) => {\r\n\t\t\tctx.save();\r\n\t\t\tfn(ctx);\r\n\t\t\tctx.restore();\r\n\t\t});\r\n\r\n\t\tpendingInvalidation = false;\r\n\t}\r\n\r\n\tonMount(() => {\r\n\t\tctx = canvas.getContext('2d');\r\n\t});\r\n\r\n\tonDestroy(() => {\r\n\t\tif (frameId) {\r\n\t\t\tcancelAnimationFrame(frameId);\r\n\t\t}\r\n\t});\r\n\r\n\t$: setContext(contextName, {\r\n\t\tregister(fn) {\r\n\t\t\tdrawFunctions.push(fn);\r\n\t\t},\r\n\t\tderegister(fn) {\r\n\t\t\tdrawFunctions.splice(drawFunctions.indexOf(fn), 1);\r\n\t\t},\r\n\t\tinvalidate() {\r\n\t\t\tif (pendingInvalidation) return;\r\n\t\t\tpendingInvalidation = true;\r\n\t\t\tframeId = requestAnimationFrame(update);\r\n\t\t},\r\n\t});\r\n\r\n\t$: if (canvas && ctx) scaleCanvas(canvas, ctx, width, height);\r\n</script>\r\n\r\n<canvas bind:this={canvas} />\r\n<slot />\r\n\r\n<style>\r\n\t    canvas {\r\n        position: var(--position, absolute);\r\n        /* top: 15px;\r\n\t\tleft: 35px; */\r\n    }\r\n</style>",
    "<script>\r\n    import { createEventDispatcher } from \"svelte\";\r\n    import * as d3 from \"d3\";\r\n    import { LayerCake, Svg } from \"layercake\";\r\n    import Map from \"./Map.svelte\";\r\n    import { years, get_current_isos } from \"../utils\";\r\n    import Point from \"./Point.svelte\";\r\n\r\n    const dispatch = createEventDispatcher();\r\n\r\n    export let pax;\r\n    export let mygeojson;\r\n    export let pax_timeline;\r\n    export let pax_gender;\r\n    export let step;\r\n    export let central_points;\r\n\r\n    let transform = d3.zoomIdentity;\r\n    let newTransform;\r\n\r\n    let width = 400;\r\n    let height = 400;\r\n    let cumulative_isos;\r\n    let innerWidth, innerHeight, xScale, yScale;\r\n    const margin = { top: 20, right: 20, bottom: 20, left: 40 };\r\n\r\n    $: projection = d3.geoNaturalEarth1().fitSize([width, height], mygeojson);\r\n    $: pathGenerator = d3.geoPath(projection);\r\n\r\n    let countries = [];\r\n    $: if (mygeojson)\r\n        countries = mygeojson.features.map((feature) => {\r\n            return {\r\n                ...feature,\r\n                path: pathGenerator(feature),\r\n                bounds: pathGenerator.bounds(feature),\r\n                centroid: pathGenerator.centroid(feature), // Get the country's central point\r\n            };\r\n        });\r\n\r\n    let afg;\r\n    let x0, y0, x1, y1;\r\n    $: if (countries.length > 0) {\r\n        afg = countries.find((d) => d.properties.admin == \"Afghanistan\");\r\n        [[x0, y0], [x1, y1]] = afg.bounds;\r\n    }\r\n\r\n    $: innerWidth = width - margin.left - margin.right;\r\n    $: innerHeight = height - margin.top - margin.bottom;\r\n\r\n    $: xScale = d3\r\n        .scaleBand()\r\n        .domain(years)\r\n        .range([0, innerWidth])\r\n        .padding(0.1);\r\n\r\n    $: yScale = d3.scaleLinear().domain([0, 100]).range([innerHeight, 0]);\r\n\r\n    // zoom to afghanistan\r\n    function smoothZoom(newTransform) {\r\n        const interpolate = d3.interpolateTransformSvg(transform, newTransform);\r\n        d3.transition()\r\n            .duration(750)\r\n            .tween(\"zoom\", () => (t) => {\r\n                transform = interpolate(t);\r\n            });\r\n    }\r\n\r\n    //initial functions\r\n    $: if (pax) {\r\n        // current_central_points = get_current_central_points(pax);\r\n        cumulative_isos = get_current_isos(pax);\r\n        dispatch(\"mapLoaded\");\r\n    }\r\n\r\n    //steps\r\n    $: if (step == \"map_one\") {\r\n        cumulative_isos = get_current_isos(pax);\r\n        console.log(cumulative_isos);\r\n    } else if (step == \"map_two\") {\r\n        cumulative_isos = get_current_isos(pax_gender);\r\n        cumulative_isos = cumulative_isos.filter((entry) => entry.count > 1);\r\n        // current_central_points = get_current_central_points(pax_gender);\r\n        smoothZoom(d3.zoomIdentity);\r\n    } else if (step == \"map_three\") {\r\n        cumulative_isos = [{ iso: \"AFG\", count: 30 }];\r\n        newTransform = d3.zoomIdentity\r\n            .translate(width / 2, height / 2)\r\n            .scale(\r\n                Math.min(\r\n                    2,\r\n                    0.9 / Math.max((x1 - x0) / width, (y1 - y0) / height),\r\n                ),\r\n            )\r\n            .translate(-(x0 + x1) / 2, -(y0 + y1) / 2);\r\n\r\n        smoothZoom(newTransform);\r\n        // let just_quotas = d3.groups(pax, (d) => d.WggIntLaw);\r\n        // cumulative_isos = get_current_isos(just_quotas[1][1]);\r\n        // // current_central_points = get_current_central_points(pax_gender);\r\n    } else if (step == \"map_four\") {\r\n        // let just_quotas = d3.groups(pax, (d) => d.WggUnsc);\r\n        // cumulative_isos = get_current_isos(just_quotas[1][1]);\r\n        // current_central_points = get_current_central_points(pax_gender);\r\n    }\r\n\r\n    function formatMobile(tick) {\r\n        return \"'\" + tick.toString().slice(-2);\r\n    }\r\n\r\n    // $: console.log(\"rendered data: \", rendered_data);\r\n    // $: console.log(\"central points: \", central_points);\r\n</script>\r\n\r\n{#if mygeojson && pax_timeline}\r\n    <div class=\"wrapper\" bind:clientWidth={width} bind:clientHeight={height}>\r\n        {#if mygeojson}\r\n            <LayerCake>\r\n                <Svg>\r\n                    <Map {countries} {transform} {cumulative_isos} />\r\n                </Svg>\r\n            </LayerCake>\r\n        {/if}\r\n    </div>\r\n{/if}\r\n\r\n<style>\r\n    .wrapper {\r\n        height: 90vh;\r\n        position: relative;\r\n    }\r\n</style>\r\n",
    "<script>\r\n    import * as d3 from \"d3\";\r\n    import { tweened } from \"svelte/motion\";\r\n    import { cubicOut } from \"svelte/easing\";\r\n    import { createEventDispatcher } from \"svelte\"; // Import the dispatcher\r\n\r\n    export let x;\r\n    export let y;\r\n    export let id;\r\n    export let width;\r\n    export let height;\r\n    export let info;\r\n    // export let step;\r\n    export let i;\r\n\r\n    // $: if (step == \"5\") {\r\n    //     d3.select(\"#id685\").style(\"fill\", \"blue\");\r\n    // }\r\n\r\n    const dispatch = createEventDispatcher();\r\n\r\n    // Define position tween parameters with staggered delay\r\n    const positionTweenParams = {\r\n        delay: (i / 4) * Math.random(), // Delay increases with index\r\n        duration: 300,\r\n        easing: cubicOut,\r\n    };\r\n\r\n    const tX = tweened(null, positionTweenParams);\r\n    const tY = tweened(null, positionTweenParams);\r\n    const tWidth = tweened(null, { duration: 300, easing: cubicOut });\r\n    const tHeight = tweened(null, positionTweenParams);\r\n\r\n    // Update position tweens after size animation completes\r\n    $: tX.set(x);\r\n    $: tY.set(y);\r\n    $: tWidth.set(width);\r\n    $: tHeight.set(height);\r\n\r\n    // Hover state for adding a class\r\n    let isHovered = false;\r\n\r\n    const handleMouseEnter = () => {\r\n        isHovered = true;\r\n        // Dispatch the custom event with necessary data\r\n        dispatch(\"hover\", { x, y, info });\r\n    };\r\n\r\n    const handleMouseLeave = () => {\r\n        setTimeout(() => {\r\n            isHovered = false;\r\n        }, 0); // Delay before transitioning back\r\n        // Dispatch the custom event to clear the tooltip\r\n        dispatch(\"leave\");\r\n    };\r\n</script>\r\n\r\n<g transform=\"translate({$tX} {$tY})\">\r\n    <rect\r\n        {id}\r\n        x=\"0\"\r\n        y=\"0\"\r\n        width={$tWidth}\r\n        height={$tHeight}\r\n        rx=\"1\"\r\n        fill=\"#F6F1D6\"\r\n        stroke=\"gray\"\r\n        stroke-width=\"0.5\"\r\n        class:is-hovered={isHovered}\r\n        on:mouseenter={handleMouseEnter}\r\n        on:mouseleave={handleMouseLeave}\r\n    />\r\n</g>\r\n\r\n<style>\r\n    rect {\r\n        fill: #f6f1d6;\r\n        /* transition: fill 0.3s cubic-bezier(0.25, 0.1, 0.25, 1); */\r\n    }\r\n\r\n    /* rect.is-hovered {\r\n        fill: blue;\r\n    } */\r\n</style>\r\n",
    "<script>\r\n    import * as d3 from \"d3\";\r\n    import { generateHandwrittenLine, lineGenerator } from \"../utils\";\r\n    import Map from \"./Map.svelte\";\r\n    import { slide } from \"svelte/transition\";\r\n    import Datapoint from \"./Datapoint.svelte\";\r\n\r\n    export let pax;\r\n    export let pax_gender;\r\n    export let step;\r\n    export let central_points;\r\n    // export let mygeojson;\r\n\r\n    let width = 400;\r\n    let height = 400;\r\n    let current_central_points;\r\n    let current_pax, def_pax, def_pax_gender;\r\n    let gap = 2;\r\n\r\n    let current_isos;\r\n    let cumulative_isos;\r\n    function get_current_central_points(pax) {\r\n        current_isos = pax\r\n            .map((d) => {\r\n                if (d.GeWom == \"1\") {\r\n                    return d.Loc1ISO;\r\n                }\r\n            })\r\n            .filter((iso) => iso !== undefined && iso !== null);\r\n\r\n        // Create the new array of objects\r\n        let points = current_isos\r\n            .map((code) => {\r\n                // Find the matching country object\r\n                const country = central_points.find((c) => c.iso_code === code);\r\n\r\n                if (country) {\r\n                    return {\r\n                        name: country.name,\r\n                        code: code,\r\n                        longitude: +country.central_longitude,\r\n                        latitude: +country.central_latitude,\r\n                    };\r\n                } else {\r\n                    // Return null or any fallback in case no match is found\r\n                    return null;\r\n                }\r\n            })\r\n            .filter((item) => item !== null); // Remove null entries\r\n\r\n        return points;\r\n    }\r\n\r\n    function get_current_isos(data) {\r\n        const matchingLoc1ISO = data\r\n            // .filter((d) => d.GeWom === \"1\")\r\n            .map((d) => d.Loc1ISO);\r\n\r\n        return matchingLoc1ISO;\r\n    }\r\n\r\n    current_pax = pax;\r\n    def_pax = pax;\r\n    def_pax_gender = pax_gender;\r\n\r\n    $: rects_svg_width = width * 0.2;\r\n    $: map_svg_width = width * 0.8 - margin.left - margin.right;\r\n\r\n    $: innerWidth = rects_svg_width - margin.left - margin.right;\r\n    $: innerHeight = height - margin.top - margin.bottom;\r\n\r\n    // Store initial number of rectangles to fix grid size\r\n    const initialPaxCount = pax.length;\r\n\r\n    // Dynamically calculate the number of columns based on the width and the initial pax count\r\n    $: numCols = Math.ceil(\r\n        Math.sqrt(initialPaxCount * (innerWidth / innerHeight)),\r\n    );\r\n    $: numRows = Math.ceil(initialPaxCount / numCols);\r\n\r\n    // Calculate available space after accounting for gaps\r\n    $: totalGapX = (numCols - 1) * gap;\r\n    $: totalGapY = (numRows - 1) * gap;\r\n\r\n    // Compute the width and height of each rectangle, accounting for gaps\r\n    $: rectWidth = (innerWidth - totalGapX) / numCols;\r\n    $: rectHeight = (innerHeight - totalGapY) / numRows;\r\n\r\n    $: if (current_pax && central_points) {\r\n        current_central_points = get_current_central_points(current_pax);\r\n        cumulative_isos = get_current_isos(current_pax);\r\n    }\r\n\r\n    const margin = {\r\n        top: 10,\r\n        right: 10,\r\n        bottom: 10,\r\n        left: 10,\r\n    };\r\n\r\n    $: if (step == \"one\") {\r\n        current_pax = pax;\r\n        d3.selectAll(\".agt\").style(\"fill\", \"black\");\r\n    } else if (step == \"two\") {\r\n        rendered_data = current_pax.map((d, i) => {\r\n            return {\r\n                x: (i % numCols) * (rectWidth + gap),\r\n                y:\r\n                    innerHeight -\r\n                    (Math.floor(i / numCols) + 1) * (rectHeight + gap),\r\n                width: rectWidth,\r\n                height: rectHeight,\r\n            };\r\n        });\r\n\r\n    } else if (step == \"three\") {\r\n        rendered_data = current_pax.map((d, i) => {\r\n            return {\r\n                x: d.GeWom === \"1\" ? (i % numCols) * (rectWidth + gap) : -50,\r\n                y:\r\n                    innerHeight -\r\n                    (Math.floor(i / numCols) + 1) * (rectHeight + gap),\r\n                width: rectWidth,\r\n                height: rectHeight, // Conditional height\r\n            };\r\n        });\r\n\r\n        d3.selectAll(\".agt\").style(\"fill\", \"white\");\r\n        d3.selectAll(\".quotas\").style(\"fill\", \"black\");\r\n    } else if (step == \"four\") {\r\n        d3.selectAll(\".agt\").style(\"fill\", \"white\");\r\n        d3.selectAll(\".inter_law\").style(\"fill\", \"black\");\r\n    } else if (step == \"five\") {\r\n        d3.selectAll(\".agt\").style(\"fill\", \"white\");\r\n        d3.selectAll(\".un\").style(\"fill\", \"black\");\r\n    }\r\n\r\n    $: rendered_data = current_pax.map((d, i) => {\r\n        return {\r\n            x: 0,\r\n            y: innerHeight - (Math.floor(i / numCols) + 1) * (rectHeight + gap),\r\n            width: 1,\r\n            height: 1,\r\n        };\r\n    });\r\n\r\n    //Construct the class string\r\n    function getClassString(paxItem) {\r\n        let classes = [\"agt\"];\r\n        if (paxItem.GeWom == \"1\") {\r\n            classes.push(\"gender\");\r\n        }\r\n        if (paxItem.WggGenQuot === \"1\") {\r\n            classes.push(\"quotas\");\r\n        }\r\n        if (paxItem.WggIntLaw === \"1\") {\r\n            classes.push(\"inter_law\");\r\n        }\r\n\r\n        if (paxItem.WggUnsc === \"1\") {\r\n            classes.push(\"un\");\r\n        }\r\n        return classes.join(\" \");\r\n    }\r\n\r\n    function show_info(d) {\r\n        // console.log(d);\r\n    }\r\n</script>\r\n\r\n{#if current_pax}\r\n    <div class=\"wrapper\" bind:clientWidth={width} bind:clientHeight={height}>\r\n        <svg width={rects_svg_width} {height}>\r\n            <g\r\n                class=\"inner_chart\"\r\n                transform=\"translate({margin.left}, {margin.top})\"\r\n            >\r\n                {#each rendered_data as d, i}\r\n                    <Datapoint\r\n                        {i}\r\n                        x={d.x}\r\n                        y={d.y}\r\n                        width={d.width}\r\n                        height={d.height}\r\n                    />\r\n                {/each}\r\n            </g>\r\n        </svg>\r\n        <!-- <Map\r\n            projectionName={\"geoNaturalEarth1\"}\r\n            {cumulative_isos}\r\n            {map_svg_width}\r\n            {height}\r\n            {mygeojson}\r\n        /> -->\r\n    </div>\r\n{/if}\r\n\r\n<style>\r\n    .wrapper {\r\n        height: 90vh;\r\n        position: relative;\r\n    }\r\n</style>\r\n",
    "<script>\r\n    import { getContext } from \"svelte\";\r\n    import * as geo from \"d3-geo\";\r\n    import * as d3 from \"d3\";\r\n\r\n    export let cumulative_isos;\r\n    export let transform;\r\n    export let countries;\r\n\r\n    const { data, width, height } = getContext(\"LayerCake\");\r\n    let opacity_generator = d3.scaleLinear().domain([0, 150]).range([0.2, 1]);\r\n\r\n    $: if (cumulative_isos) {\r\n        d3.selectAll(\".country\").style(\"fill\", \" black\");\r\n        cumulative_isos.forEach((d) => {\r\n            d3.selectAll(\".\" + d.iso)\r\n                .style(\"fill\", \"#f6f1d6\")\r\n                .style(\"fill-opacity\", opacity_generator(d.count));\r\n        });\r\n    }\r\n\r\n    function polygon_hover(feature) {\r\n        // console.log(feature);\r\n    }\r\n\r\n    function initial_fill(polygon) {\r\n        return cumulative_isos.some(\r\n            (item) => item.iso === polygon.properties.adm0_iso,\r\n        )\r\n            ? \"#f6f1d6\"\r\n            : \"black\";\r\n    }\r\n\r\n\r\n    function opacity_calculator(country) {\r\n        let country_code = country.properties.adm0_iso;\r\n        let find_cntry = cumulative_isos.find((d) => d.iso == country_code);\r\n        if (find_cntry) {\r\n            return opacity_generator(find_cntry.count);\r\n        } else {\r\n            return 1;\r\n        }\r\n    }\r\n</script>\r\n\r\n<g class=\"map-group\" {transform}>\r\n    {#each countries as country}\r\n        <path\r\n            fill={initial_fill(country)}\r\n            fill-opacity={opacity_calculator(country)}\r\n            class={\"country \" + country.properties.adm0_iso}\r\n            stroke=\"#4d4d4d\"\r\n            stroke-width=\"0.5\"\r\n            d={country.path}\r\n        ></path>\r\n    {/each}\r\n</g>\r\n\r\n<style>\r\n    .country {\r\n        stroke-width: 0.5px;\r\n    }\r\n</style>\r\n",
    "<script>\r\n    import * as d3 from \"d3\";\r\n    import { years, full_grid, full_grid_filter } from \"../utils\";\r\n    import Background from \"./BackgroundRectangle.svelte\";\r\n    import IndividualRectangle from \"./IndividualRectangle.svelte\";\r\n\r\n    // canvas variation\r\n    import Canvas from \"./Canvas.svelte\";\r\n    import CanvasRectangle from \"./CanvasRectangle.svelte\";\r\n    import CanvasBackground from \"./CanvasBackground.svelte\";\r\n\r\n    export let pax;\r\n    export let step;\r\n\r\n    let tooltip = { visible: false, x: 0, y: 0, info: \"\" }; // Tooltip state\r\n    let width = 400;\r\n    let height = 400;\r\n    let rendered_data;\r\n    let background_data;\r\n    let initialPaxCount;\r\n    let innerWidth, innerHeight, xScale, yScale;\r\n    const margin = { top: 20, right: 20, bottom: 20, left: 40 };\r\n\r\n    $: innerWidth = width - margin.left - margin.right;\r\n    $: innerHeight = height - margin.top - margin.bottom;\r\n\r\n    $: xScale = d3\r\n        .scaleBand()\r\n        .domain(years)\r\n        .range([0, innerWidth])\r\n        .padding(0.1);\r\n\r\n    $: yScale = d3.scaleLinear().domain([0, 100]).range([innerHeight, 0]);\r\n\r\n    //initial functions\r\n    $: if (pax) {\r\n        //prepare the initial grid\r\n        initialPaxCount = pax.length;\r\n        rendered_data = full_grid(\r\n            pax,\r\n            innerHeight,\r\n            innerWidth,\r\n            initialPaxCount,\r\n        );\r\n        //background rect outlines\r\n        background_data = full_grid(\r\n            pax,\r\n            innerHeight,\r\n            innerWidth,\r\n            initialPaxCount,\r\n        );\r\n    }\r\n\r\n    //steps\r\n    $: if (step == \"rect01\") {\r\n        // full grid\r\n        rendered_data = full_grid(\r\n            pax,\r\n            innerHeight,\r\n            innerWidth,\r\n            initialPaxCount,\r\n        );\r\n    } else if (step == \"rect02\") {\r\n        //full grid gender\r\n        rendered_data = full_grid_filter(\r\n            pax,\r\n            innerHeight,\r\n            innerWidth,\r\n            initialPaxCount,\r\n        );\r\n    }\r\n\r\n    function formatMobile(tick) {\r\n        return \"'\" + tick.toString().slice(-2);\r\n    }\r\n\r\n    // Event handlers for tooltip\r\n    const handleHover = (event) => {\r\n        let dyn_x;\r\n        let dyn_y;\r\n        if (event.detail.x >= innerWidth / 2) {\r\n            dyn_x = event.detail.x - 140;\r\n        } else if (event.detail.x < innerWidth / 2) {\r\n            dyn_x = event.detail.x + 70;\r\n        }\r\n\r\n        if (event.detail.y >= innerHeight / 2) {\r\n            dyn_y = event.detail.y - 50;\r\n        } else if (event.detail.y < innerHeight / 2) {\r\n            dyn_y = event.detail.y;\r\n        }\r\n\r\n        tooltip = {\r\n            visible: true,\r\n            x: dyn_x,\r\n            y: dyn_y,\r\n            info: event.detail.info,\r\n        };\r\n    };\r\n\r\n    const handleLeave = () => {\r\n        tooltip = { ...tooltip, visible: false };\r\n    };\r\n\r\n    // $: console.log(\"rendered data: \", rendered_data);\r\n</script>\r\n\r\n{#if rendered_data}\r\n    <div class=\"wrapper\" bind:clientWidth={width} bind:clientHeight={height}>\r\n        <svg {width} {height}>\r\n            <g\r\n                class=\"timeline\"\r\n                transform=\"translate({margin.left}, {margin.top})\"\r\n            >\r\n                {#each background_data as d, i}\r\n                    <Background\r\n                        {i}\r\n                        x={d.x}\r\n                        y={d.y}\r\n                        width={d.width}\r\n                        height={d.height}\r\n                        info={d.info}\r\n                    />\r\n                {/each}\r\n                {#each rendered_data as d, i}\r\n                    <IndividualRectangle\r\n                        {i}\r\n                        x={d.x}\r\n                        y={d.y}\r\n                        width={d.width}\r\n                        height={d.height}\r\n                        info={d.info}\r\n                        id={d.id}\r\n                        on:hover={handleHover}\r\n                        on:leave={handleLeave}\r\n                    />\r\n                {/each}\r\n            </g>\r\n        </svg>\r\n\r\n        <!-- <Canvas {width} {height} --position=\"absolute\">\r\n            {#each background_data as d, i}\r\n                <CanvasBackground\r\n                    x={d.x}\r\n                    y={d.y}\r\n                    width={d.width}\r\n                    height={d.height}\r\n                />\r\n            {/each}\r\n        </Canvas>\r\n        <Canvas {width} {height}>\r\n            {#each rendered_data as d, i}\r\n                <CanvasRectangle\r\n                    {i}\r\n                    x={d.x}\r\n                    y={d.y}\r\n                    width={d.width}\r\n                    height={d.height}\r\n                />\r\n            {/each}\r\n        </Canvas> -->\r\n        <!-- {#if tooltip.visible}\r\n            <div\r\n                class=\"tooltip\"\r\n                style=\"position: absolute; left: {tooltip.x}px; top: {tooltip.y}px;\"\r\n            >\r\n                <p>{tooltip.info}</p>\r\n            </div>\r\n        {/if} -->\r\n    </div>\r\n{/if}\r\n\r\n<style>\r\n    .wrapper {\r\n        height: 90vh;\r\n        position: relative;\r\n    }\r\n\r\n    /* .tooltip {\r\n        background-color: rgba(0, 0, 0, 0.8);\r\n        color: white;\r\n        padding: 10px;\r\n        border-radius: 2px;\r\n        pointer-events: none;\r\n        transition: opacity 0.3s ease;\r\n        width: 150px;\r\n    }\r\n\r\n    p {\r\n        margin: 5px;\r\n        font-size: 12px;\r\n    } */\r\n</style>\r\n",
    "<script>\r\n    import * as d3 from \"d3\";\r\n    import IndividualRectangle from \"./IndividualRectangle.svelte\";\r\n    import { years, pax_stages_grid, pax_stages_filter_grid } from \"../utils\";\r\n    import Background from \"./BackgroundRectangle.svelte\";\r\n\r\n    export let pax;\r\n    export let pax_stages;\r\n    export let step;\r\n\r\n    let width = 400;\r\n    let imageSource = \"./img/africa.png\";\r\n    let exampleImg;\r\n    let imageX;\r\n    let imageHeight; // Reactive variable for the image height\r\n    let height = 400;\r\n    let rendered_data;\r\n    let background_data;\r\n    let initialPaxCount;\r\n    let innerWidth, innerHeight, xScale, yScale;\r\n    let stages = [\r\n        \"Pre-Negotiation\",\r\n        \"Ceasefire\",\r\n        \"Partial\",\r\n        \"Comprehensive\",\r\n        \"Implementation\",\r\n        \"Renewal\",\r\n        \"Other\",\r\n    ];\r\n\r\n    const margin = { top: 20, right: 20, bottom: 20, left: 40 };\r\n\r\n    $: innerWidth = width - margin.left - margin.right;\r\n    $: innerHeight = height - margin.top - margin.bottom;\r\n    $: column_width = innerWidth / 7;\r\n\r\n    $: xScale = d3\r\n        .scaleBand()\r\n        .domain(years)\r\n        .range([0, innerWidth])\r\n        .padding(0.1);\r\n\r\n    $: yScale = d3.scaleLinear().domain([0, 100]).range([innerHeight, 0]);\r\n\r\n    //initial functions\r\n    $: if (pax && pax_stages) {\r\n        //prepare the initial grid\r\n        initialPaxCount = pax.length;\r\n        rendered_data = pax_stages_grid(pax_stages, innerHeight, innerWidth);\r\n        background_data = pax_stages_grid(pax_stages, innerHeight, innerWidth);\r\n    }\r\n\r\n    //steps\r\n    $: if (step == \"stage01\") {\r\n        //full stages\r\n        rendered_data = pax_stages_grid(pax_stages, innerHeight, innerWidth);\r\n    } else if (step == \"stage02\") {\r\n        //gender stages\r\n        rendered_data = pax_stages_filter_grid(\r\n            pax_stages,\r\n            innerHeight,\r\n            innerWidth,\r\n            \"GeWom\",\r\n        );\r\n        d3.selectAll(\"#example_stage\").style(\"opacity\", 0);\r\n    } else if (step == \"stage03\") {\r\n        d3.selectAll(\"#example_stage\").style(\"opacity\", 1);\r\n    }\r\n\r\n    function formatMobile(tick) {\r\n        return \"'\" + tick.toString().slice(-2);\r\n    }\r\n\r\n    // Function to update the height of the image\r\n    function updateImageHeight() {\r\n        if (exampleImg) {\r\n            const rect = exampleImg.getBoundingClientRect();\r\n            imageHeight = rect.height; // Image height\r\n            imageX = rect.x; // Image x position\r\n        }\r\n    }\r\n\r\n    let lineEnd;\r\n    $: if (innerHeight) {\r\n        lineEnd = innerHeight - (innerHeight - imageHeight);\r\n    }\r\n\r\n    // $: console.log(\"rendered data: \", rendered_data);\r\n</script>\r\n\r\n{#if rendered_data}\r\n    <div class=\"wrapper\" bind:clientWidth={width} bind:clientHeight={height}>\r\n        <svg {width} {height}>\r\n            <g\r\n                class=\"timeline\"\r\n                transform=\"translate({margin.left}, {margin.top})\"\r\n            >\r\n                {#each stages as d, i}\r\n                    <text\r\n                        x={column_width * i + column_width / 2}\r\n                        y={innerHeight + 14}\r\n                        text-anchor=\"middle\"\r\n                        font-family=\"Montserrat\"\r\n                        fill=\"white\"\r\n                        font-size=\"14px\">{d}</text\r\n                    >\r\n                {/each}\r\n                {#each background_data as d, i}\r\n                    <Background\r\n                        {i}\r\n                        x={d.x}\r\n                        y={d.y}\r\n                        width={d.width}\r\n                        height={d.height}\r\n                        info={d.info}\r\n                    />\r\n                {/each}\r\n\r\n                {#each rendered_data as d, i}\r\n                    <IndividualRectangle\r\n                        {i}\r\n                        x={d.x}\r\n                        y={d.y}\r\n                        width={d.width}\r\n                        height={d.height}\r\n                        info={d.info}\r\n                        id={d.id}\r\n                    />\r\n                {/each}\r\n            </g>\r\n            {#if lineEnd}\r\n                <path\r\n                    id=\"example_stage\"\r\n                    d={`M ${column_width*2},${innerHeight - 30} \r\n                       C ${column_width*2},${innerHeight - 100} \r\n                         ${imageX },${lineEnd + 100} \r\n                         ${imageX},${lineEnd}`}\r\n                    fill=\"none\"\r\n                    stroke=\"white\"\r\n                    stroke-width=\"1\"\r\n                    opacity=\"0\"\r\n                />\r\n            {/if}\r\n        </svg>\r\n        <div id=\"example_stage\">\r\n            <img\r\n                class=\"example_img\"\r\n                src={imageSource}\r\n                alt=\"agt\"\r\n                bind:this={exampleImg}\r\n                on:load={updateImageHeight}\r\n            />\r\n        </div>\r\n    </div>\r\n{/if}\r\n\r\n<style>\r\n    .wrapper {\r\n        height: 90vh;\r\n        position: relative;\r\n    }\r\n    #example_stage {\r\n        position: absolute;\r\n        top: 0;\r\n        left: 0;\r\n        width: 100%; /* Full width of the parent/container */\r\n        height: 100%; /* Full height of the parent/container if needed */\r\n        display: flex; /* Enables flexbox for centering */\r\n        justify-content: center;\r\n        overflow: hidden; /* Prevents content overflow */\r\n        opacity: 0;\r\n        transition: 0.5s ease;\r\n    }\r\n\r\n    #example_stage img {\r\n        position: absolute;\r\n        top: 0px;\r\n        max-width: 80%; /* Ensures the image scales within the width of its container */\r\n        height: auto; /* Maintains the aspect ratio of the image */\r\n        display: block; /* Removes extra space below the image (from inline elements) */\r\n    }\r\n</style>\r\n",
    "<script>\r\n    import * as d3 from \"d3\";\r\n    import IndividualRectangle from \"./IndividualRectangle.svelte\";\r\n    import { years } from \"../utils\";\r\n    import Background from \"./BackgroundRectangle.svelte\";\r\n\r\n    export let pax;\r\n    export let pax_timeline;\r\n    export let step;\r\n\r\n    let width = 400;\r\n    let height = 400;\r\n    let rendered_data;\r\n    let background_data;\r\n    let innerWidth, innerHeight, xScale, yScale;\r\n    let imageX;\r\n    let imageSource = \"./img/lome.png\";\r\n    let exampleImg;\r\n    let imageHeight; // Reactive variable for the image height\r\n    let margin = { top: 20, right: 20, bottom: 20, left: 40 };\r\n\r\n    $: innerWidth = width - margin.left - margin.right;\r\n    $: innerHeight = height - margin.top - margin.bottom;\r\n\r\n    // Attach event listener to window resize\r\n    window.addEventListener(\"resize\", updateImageHeight);\r\n\r\n    $: xScale = d3\r\n        .scaleBand()\r\n        .domain(years)\r\n        .range([0, innerWidth])\r\n        .padding(0.1);\r\n\r\n    $: yScale = d3.scaleLinear().domain([0, 100]).range([innerHeight, 0]);\r\n    $: yHeight = d3.scaleLinear().domain([0, 40000]).range([0, innerHeight]);\r\n\r\n    function position_calc(pax, innerWidth, filter) {\r\n        let previousYear = null; // Track the last year seen\r\n        let index;\r\n        index = filter === \"none\" ? 0 : -1;\r\n\r\n        let calculated_positions = pax.map((d) => {\r\n            let yPosition;\r\n\r\n            const currentYear = d.Dat.substring(6, 10);\r\n            // Reset index if the year has changed\r\n            if (currentYear !== previousYear) {\r\n                index = filter === \"none\" ? 0 : -1;\r\n                previousYear = currentYear;\r\n            }\r\n\r\n            if (filter == \"none\") {\r\n                yPosition = yScale(index);\r\n            } else {\r\n                yPosition =\r\n                    d[filter] === \"1\" ? yScale(++index) : innerHeight + 100;\r\n            }\r\n\r\n            const result = {\r\n                x: xScale(currentYear) + Math.random() * 2 - 1,\r\n                y: yPosition + Math.random() * 2 - 1,\r\n                width: xScale.bandwidth(),\r\n                height: 3,\r\n                info: d.Agt,\r\n            };\r\n\r\n            if (filter === \"none\") index++;\r\n            return result;\r\n        });\r\n        return calculated_positions;\r\n    }\r\n\r\n    let agt_path_year = \"1999\";\r\n    //initial functions\r\n    $: if (pax) {\r\n        // background unfilled rectangles\r\n        background_data = position_calc(pax, innerWidth, \"none\");\r\n        // filled rectangles\r\n        rendered_data = position_calc(pax, innerWidth, \"none\");\r\n    }\r\n    //steps\r\n    $: if (step == \"1\") {\r\n        d3.selectAll(\".un_resolution\").style(\"visibility\", \"hidden\");\r\n        // all agreements\r\n        rendered_data = position_calc(pax, innerWidth, \"none\");\r\n    } else if (step == \"2\") {\r\n        d3.selectAll(\".un_resolution\").style(\"visibility\", \"visible\");\r\n        // gender agreements\r\n        rendered_data = position_calc(pax, innerWidth, \"GeWom\");\r\n    } else if (step == \"3\") {\r\n        d3.selectAll(\".un_resolution\").style(\"visibility\", \"visible\");\r\n        // gender agreements\r\n        rendered_data = position_calc(pax, innerWidth, \"GeWom\");\r\n    } else if (step == \"4\") {\r\n        d3.selectAll(\".un_resolution\").style(\"visibility\", \"hidden\");\r\n        d3.selectAll(\"#example\").style(\"opacity\", 0);\r\n        // rehabilitation agreements\r\n        rendered_data = position_calc(pax, innerWidth, \"WggRehab\");\r\n    } else if (step == \"5\") {\r\n        d3.selectAll(\"#example\").style(\"opacity\", 1);\r\n        imageSource = \"./img/lome.png\";\r\n        agt_path_year = \"1999\";\r\n        // rehabilitation agreements\r\n        rendered_data = position_calc(pax, innerWidth, \"WggRehab\");\r\n    } else if (step == \"6\") {\r\n        d3.selectAll(\"#example\").style(\"opacity\", 0);\r\n        // implementation agreements\r\n        rendered_data = position_calc(pax, innerWidth, \"WggImplRole\");\r\n    } else if (step == \"7\") {\r\n        d3.selectAll(\"#example\").style(\"opacity\", 1);\r\n        imageSource = \"./img/colombia.png\";\r\n        agt_path_year = \"2016\";\r\n        // implementation agreements\r\n        rendered_data = position_calc(pax, innerWidth, \"WggImplRole\");\r\n    } else if (step == \"8\") {\r\n        d3.selectAll(\"#example\").style(\"opacity\", 0);\r\n        // human rights agreements\r\n        rendered_data = position_calc(pax, innerWidth, \"WggHR\");\r\n    } else if (step == \"9\") {\r\n        imageSource = \"./img/guatemala.png\";\r\n        d3.selectAll(\"#example\").style(\"opacity\", 1);\r\n        agt_path_year = \"1996\";\r\n    }\r\n    function formatMobile(tick) {\r\n        return \"'\" + tick.toString().slice(-2);\r\n    }\r\n\r\n    // Function to update the height of the image\r\n    function updateImageHeight() {\r\n        if (exampleImg) {\r\n            const rect = exampleImg.getBoundingClientRect();\r\n            imageHeight = rect.height; // Image height\r\n            imageX = rect.x; // Image x position\r\n        }\r\n    }\r\n\r\n    let lineEnd;\r\n    $: if (innerHeight) {\r\n        lineEnd = innerHeight - (innerHeight - imageHeight);\r\n    }\r\n\r\n    // Call the function on initial load to set the height\r\n    updateImageHeight();\r\n</script>\r\n\r\n{#if rendered_data && pax_timeline}\r\n    <div class=\"wrapper\" bind:clientWidth={width} bind:clientHeight={height}>\r\n        <svg {width} {height}>\r\n            <g\r\n                class=\"timeline\"\r\n                transform=\"translate({margin.left}, {margin.top})\"\r\n            >\r\n                <g class=\"axis x-axis\">\r\n                    {#each years as tick}\r\n                        <g\r\n                            class=\"tick tick-{tick}\"\r\n                            transform=\"translate({xScale(tick) +\r\n                                xScale.bandwidth() / 2},{innerHeight + 17})\"\r\n                        >\r\n                            <text y=\"1\"\r\n                                >{innerWidth > 800\r\n                                    ? tick\r\n                                    : formatMobile(tick)}</text\r\n                            >\r\n                        </g>\r\n                    {/each}\r\n                </g>\r\n                {#each background_data as d, i}\r\n                    <Background\r\n                        {i}\r\n                        x={d.x}\r\n                        y={d.y}\r\n                        width={d.width}\r\n                        height={d.height}\r\n                        info={d.info}\r\n                    />\r\n                {/each}\r\n                {#each rendered_data as d, i}\r\n                    <IndividualRectangle\r\n                        {i}\r\n                        id={d.id}\r\n                        x={d.x}\r\n                        y={d.y}\r\n                        width={d.width}\r\n                        height={d.height}\r\n                        info={d.info}\r\n                    />\r\n                {/each}\r\n\r\n                <rect\r\n                    class=\"un_resolution\"\r\n                    x={xScale(\"2000\") + xScale.bandwidth() / 2}\r\n                    y={20}\r\n                    width=\"1\"\r\n                    height={innerHeight - 100}\r\n                    fill=\"white\"\r\n                />\r\n\r\n                {#if lineEnd}\r\n                    <path\r\n                        id=\"example\"\r\n                        d={`M ${xScale(agt_path_year)},${innerHeight - 10} \r\n                       C ${xScale(agt_path_year)},${innerHeight - 100} \r\n                         ${imageX - margin.left},${lineEnd + 100} \r\n                         ${imageX - margin.left},${lineEnd}`}\r\n                        fill=\"none\"\r\n                        stroke=\"white\"\r\n                        stroke-width=\"1\"\r\n                        opacity=\"0\"\r\n                    />\r\n                {/if}\r\n\r\n                <text\r\n                    class=\"un_resolution\"\r\n                    x={xScale(\"2000\") + xScale.bandwidth()}\r\n                    y={20}\r\n                    fill=\"white\">UN Resolution 1325</text\r\n                >\r\n            </g>\r\n        </svg>\r\n        <div id=\"example\">\r\n            <img\r\n                class=\"example_img\"\r\n                src={imageSource}\r\n                alt=\"agt\"\r\n                bind:this={exampleImg}\r\n                on:load={updateImageHeight}\r\n            />\r\n        </div>\r\n    </div>\r\n{/if}\r\n\r\n<style>\r\n    .wrapper {\r\n        height: 90vh;\r\n        position: relative;\r\n    }\r\n    .tick {\r\n        font-size: 0.725em;\r\n        font-weight: 200;\r\n    }\r\n\r\n    .un_resolution {\r\n        visibility: hidden;\r\n    }\r\n\r\n    .tick text {\r\n        fill: white;\r\n        text-anchor: start;\r\n        font-size: 12px;\r\n        font-family: \"Montserrat\";\r\n        font-weight: 400;\r\n    }\r\n\r\n    @media only screen and (max-width: 1200px) {\r\n        .tick text {\r\n            font-size: 11px;\r\n        }\r\n    }\r\n\r\n    @media only screen and (max-width: 768px) {\r\n        .tick text {\r\n            font-size: 10px;\r\n        }\r\n    }\r\n\r\n    .x-axis .tick text {\r\n        text-anchor: middle;\r\n    }\r\n\r\n    #example {\r\n        position: absolute;\r\n        top: 0;\r\n        left: 0;\r\n        width: 100%; /* Full width of the parent/container */\r\n        height: 100%; /* Full height of the parent/container if needed */\r\n        display: flex; /* Enables flexbox for centering */\r\n        justify-content: center;\r\n        overflow: hidden; /* Prevents content overflow */\r\n        opacity: 0;\r\n        transition: 0.5s ease;\r\n    }\r\n\r\n    #example img {\r\n        position: absolute;\r\n        top: 0px;\r\n        max-width: 80%; /* Ensures the image scales within the width of its container */\r\n        height: auto; /* Maintains the aspect ratio of the image */\r\n        display: block; /* Removes extra space below the image (from inline elements) */\r\n    }\r\n</style>\r\n"
  ],
  "names": [],
  "mappings": "AAyhBC,kCAAoB,CACpB,kCAAoB,CAAS,CAAG,CAC/B,UAAU,CAAE,UACb,CACA,kCAAqB,CACpB,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IACT;AC7eA,kBAAG,CACH,mBAAK,CACJ,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,CAAC,CACN,IAAI,CAAE,CACP;ACOA,iBAAI,CACH,QAAQ,CAAE,QAAQ,CAClB,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,QAAQ,CAAE,OACX,CACA,iBAAG,CAAS,CAAG,CACd,aAAa,CAAE,kBAChB;ACRA,iBAAI,CACH,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,CAAC,CACN,IAAI,CAAE,CAAC,CACP,QAAQ,CAAE,OACX;ACurBA,6BAAgB,CACf,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,GAAG,CACR,IAAI,CAAE,GAAG,CACT,gBAAgB,CAAE,KAAK,CACvB,OAAO,CAAE,IAAI,CACb,eAAe,CAAE,MAAM,CACvB,OAAO,CAAE,CACV,CAEA,2BAAc,CACb,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,GAAG,CACR,KAAK,CAAE,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CACzB,MAAM,CAAE,GAAG,CACX,WAAW,CAAE,GAAG,CAChB,SAAS,CAAE,IACZ,CAEA,6BAAgB,CACf,WAAW,CAAE,YAAY,CACzB,SAAS,CAAE,IAAI,CACf,WAAW,CAAE,GAAG,CAChB,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,GAAG,CACR,gBAAgB,CAAE,KAAK,CACvB,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CACjC,aAAa,CAAE,GAAG,CAClB,OAAO,CAAE,IAAI,CAAC,IAAI,CAClB,MAAM,CAAE,OAAO,CACf,UAAU,CACT,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC;AAC9B,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAChB,UAAU,CAAE,MACb,CAEA,6BAAe,MAAO,CACrB,gBAAgB,CAAE,KAAK,CACvB,KAAK,CAAE,KACR,CAEA,mBAAK,CACL,mBAAK,CACL,kBAAI,CACJ,oBAAM,CACN,mBAAM,CACL,UAAU,CAAE,IAAI,CAChB,KAAK,CAAE,KAAK,IAAI,CAAC,CAAC,CAAC,GAAG,CACvB,CAEA,oBAAO,CACN,MAAM,CAAE,IAAI,CACZ,OAAO,CAAE,IAAI,CACb,SAAS,CAAE,IAAI,CACf,eAAe,CAAE,aAClB,CAEA,wBAAW,CACV,IAAI,CAAE,CAAC,CAAC,CAAC,CAAC,KAAK,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,CAC7B,MAAM,CAAE,GAAG,CACX,UAAU,CAAE,MAAM,CAClB,OAAO,CAAE,IAAI,CACb,UAAU,CAAE,UACb,CAEA,MAAO,YAAY,KAAK,CAAE,CACzB,wBAAW,CACV,IAAI,CAAE,CAAC,CAAC,CAAC,CAAC,IACX,CACD;ACxzBC,gBAAG,CACD,KAAK,CAAE,GAAG,CACV,KAAK,CAAE,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CACtB,MAAM,CAAE,IAAI,CACZ,UAAU,CAAE,GAAG,CAAC,KAClB;ACUD,sBAAQ,CACP,MAAM,CAAE,IACT;ACRC,qBAAO,CACL,UAAU,CAAE,IACd,CACA,wBAAU,CACR,UAAU,CAAE,UAAU,CACtB,OAAO,CAAE,IAAI,CAAC,CAChB;ACmBD,oCAAO,CACN,cAAc,CAAE,IAAI,CACpB,WAAW,CAAE,IAAI,CACjB,SAAS,CAAE,IACZ,CACA,qBAAM,CAAC,CAAC,oBAAM,CACb,kBAAkB,CAAE,UAAU,CAC9B,UAAU,CAAE,UAAU,CACtB,eAAe,CAAE,SAAS,CAC1B,OAAO,CAAE,YACV,CACA,qBAAM,CAAC,CAAC,oBAAK,MAAO,CACnB,eAAe,CAAE,IAClB,CACA,qBAAM,CAAC,CAAC,oBAAK,OAAQ,CACpB,OAAO,CAAE,GAAG,CAAC,KAAK,CAAC,WAAW,CAC9B,gBAAgB,CAAE,IAAI,CACtB,kBAAkB,CAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAC3C,UAAU,CAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CACnC,KAAK,CAAE,IAAI,CACX,eAAe,CAAE,IAClB,CACA,qBAAM,CAAC,iBAAG,CACT,aAAa,CAAE,IAAI,CACnB,UAAU,CAAE,IAAI,CAChB,MAAM,CAAE,IAAI,CACZ,UAAU,CAAE,GAAG,CAAC,KAAK,CAAC,IACvB,CACA,gCAAG,CACF,OAAO,CAAE,CAAC,CACV,MAAM,CAAE,CACT,CACA,gCAAG,CACF,YAAY,CAAE,IAAI,CAClB,OAAO,CAAE,YACV,CACA,uCAAU,CACT,aAAa,CAAE,IAChB,CACA,sCAAS,CACR,MAAM,CAAE,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CACzB,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,cAAc,CAAE,MACjB,CACA,sCAAS,CACR,cAAc,CAAE,GACjB,CACA,gBAAC,CAAC,kBAAG,MAAO,CACX,MAAM,CAAE,OACT;ACzEA,kBAAI,CACH,kBAAkB,CAAE,UAAU,CAC9B,UAAU,CAAE,UAAU,CACtB,QAAQ,CAAE,QAAQ,CAClB,MAAM,CAAE,IAAI,CACZ,OAAO,CAAE,CAAC,CACV,aAAa,CAAE,KAChB;ACuLA,oCAAsB,CACrB,OAAO,CAAE,KAAK,CACd,QAAQ,CAAE,QAAQ,CAClB,SAAS,CAAE,IACZ,CAEA,yCAA2B,CAC1B,OAAO,CAAE,KAAK,CACd,QAAQ,CAAE,QAAQ,CAClB,KAAK,CAAE,IACR,CAEA,yCAA2B,CAC1B,OAAO,CAAE,KAAK,CACd,QAAQ,CAAE,QAAQ,CAClB,OAAO,CAAE,CACV,CAEA,yCAA0B,OAAQ,CACjC,OAAO,CAAE,GAAG,CACZ,OAAO,CAAE,KAAK,CACd,KAAK,CAAE,IACR,CAEA,mDAAqC,CACpC,OAAO,CAAE,KAAK,CACd,QAAQ,CAAE,QAAQ,CAClB,KAAK,CAAE,IAAI,CACX,SAAS,CAAE,IAAI,CACf,cAAc,CAAE,IAAI,CAIpB,WAAW,CAAE,SAId;ACEG,uBAAS,CACL,MAAM,CAAE,IAAI,CACZ,QAAQ,CAAE,QACd,CAkBA,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,YAAY,MAAM,CAAE,CAI3C,CAEA,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,YAAY,KAAK,CAAE,CAI1C;AC7OA,mBAAK,CACD,IAAI,CAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CACrB;ACuBC,oBAAO,CACJ,QAAQ,CAAE,IAAI,UAAU,CAAC,SAAS,CAGtC;ACqDA,sBAAS,CACL,MAAM,CAAE,IAAI,CACZ,QAAQ,CAAE,QACd;ACvDA,kBAAK,CACD,IAAI,CAAE,OAEV;ACyHA,sBAAS,CACL,MAAM,CAAE,IAAI,CACZ,QAAQ,CAAE,QACd;AC/IA,uBAAS,CACL,YAAY,CAAE,KAClB;ACgHA,uBAAS,CACL,MAAM,CAAE,IAAI,CACZ,QAAQ,CAAE,QACd;ACnBA,sCAAS,CACL,MAAM,CAAE,IAAI,CACZ,QAAQ,CAAE,QACd,CACA,4CAAe,CACX,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,CAAC,CACN,IAAI,CAAE,CAAC,CACP,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,OAAO,CAAE,IAAI,CACb,eAAe,CAAE,MAAM,CACvB,QAAQ,CAAE,MAAM,CAChB,OAAO,CAAE,CAAC,CACV,UAAU,CAAE,IAAI,CAAC,IACrB,CAEA,6BAAc,CAAC,kBAAI,CACf,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,GAAG,CACR,SAAS,CAAE,GAAG,CACd,MAAM,CAAE,IAAI,CACZ,OAAO,CAAE,KACb;ACqDA,sCAAS,CACL,MAAM,CAAE,IAAI,CACZ,QAAQ,CAAE,QACd,CACA,mCAAM,CACF,SAAS,CAAE,OAAO,CAClB,WAAW,CAAE,GACjB,CAEA,4CAAe,CACX,UAAU,CAAE,MAChB,CAEA,oBAAK,CAAC,mBAAK,CACP,IAAI,CAAE,KAAK,CACX,WAAW,CAAE,KAAK,CAClB,SAAS,CAAE,IAAI,CACf,WAAW,CAAE,YAAY,CACzB,WAAW,CAAE,GACjB,CAEA,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,YAAY,MAAM,CAAE,CACvC,oBAAK,CAAC,mBAAK,CACP,SAAS,CAAE,IACf,CACJ,CAEA,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,YAAY,KAAK,CAAE,CACtC,oBAAK,CAAC,mBAAK,CACP,SAAS,CAAE,IACf,CACJ,CAEA,sBAAO,CAAC,KAAK,CAAC,mBAAK,CACf,WAAW,CAAE,MACjB,CAEA,sCAAS,CACL,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,CAAC,CACN,IAAI,CAAE,CAAC,CACP,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,OAAO,CAAE,IAAI,CACb,eAAe,CAAE,MAAM,CACvB,QAAQ,CAAE,MAAM,CAChB,OAAO,CAAE,CAAC,CACV,UAAU,CAAE,IAAI,CAAC,IACrB,CAEA,uBAAQ,CAAC,kBAAI,CACT,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,GAAG,CACR,SAAS,CAAE,GAAG,CACd,MAAM,CAAE,IAAI,CACZ,OAAO,CAAE,KACb"
}